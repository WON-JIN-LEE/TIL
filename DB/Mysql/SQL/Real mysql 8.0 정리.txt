참고: Real MySQL 8.0 1편
기간: 2024-01-09 ~

3장 DB 사용자 및 권한=================================================

#사용자 계정 생성
CREATE USER 'ID입력'@'%'
	IDENTIFIED WITH 'mysql_native_password' BY '패스워드입력'; // WITH 뒤에 인증방식 지정, WITH 옵션 없으면 시스템 글로벌 설정값에 따라감

인증방식 : Caching SHA-2(256비트) Pluggable Authentication 
- 이 인증방식을 사용하려면 SSL/TLS 또는 RSA 키페어를 반드시 사용해야 하는데 이를 위해 클라이언트에서 접속할 때 SSL 옵션을 활성화해야한다.
	
8장 인덱스=================================================
8.1 디스크 읽기 방식 =============

하드 디스크 드라이브(HDD)와 솔리드 스테이드 드라이버(SSD)
컴퓨터에서 CPU나 메모리 같은 주요 장치는 대부분 전자식 창지지만 HDD는 기계식 장치다. 그래서 데이터베이스 서버에서는 항상 디스트 장치가 병목이된다.
이러한 기계식 장치를 대체하기 위해 전자식 저장매체인 SSD가 많이 출시되고 있다.

SSD는 기존 하드 디스크 드라이브에서 데이터 저장용 플래터(원판)을 제거하고 대신 플래시 메모리를 장착하고 있다.
그래서 디스크 원찬을 기계적으로 회전시킬 필요가 없으므로 아주 빨리 데이터를 읽고 쓸 수있다.

플래시 메모리는 전원이 공급되지 않아도 데이터가 삭제되지않는다.

#초당 처리 횟수
CPU> 메모리 D램 > 플래시 메모리 > HDD

HDD와 SSD의 성능 차이는 랜덤I/O에서는 SSD가 훨씬 빠르고, 순차I/O는 SSD가 조금빠르거나 비슷하다

8.1.2 랜덤I/O와 순차I/O=============
랜덤 I/O =>
랜덤 I/O는 데이터를 임의의 위치에서 읽거나 쓰는 패턴을 나타냅니다.
주로 랜덤한 키를 기반으로 데이터베이스의 레코드를 읽거나 쓰는 경우에 해당합니다. 예를 들어, 특정 레코드의 고유한 식별자나 키를 사용하여 해당 레코드에 직접 액세스하는 경우 랜덤 I/O가 발생할 수 있습니다.
예를 들어, 주문 번호나 사용자 ID에 기반하여 특정 주문이나 사용자의 정보를 가져오는 쿼리가 랜덤 I/O를 유발할 수 있습니다.

순차 I/O =>
순차 I/O는 데이터를 순차적인 순서로 읽거나 쓰는 패턴을 나타냅니다.
전체 테이블을 스캔하거나 범위 쿼리를 통해 일련의 레코드에 접근하는 경우 순차 I/O가 발생할 수 있습니다.
예를 들어, 모든 주문을 날짜순으로 정렬하여 가져오는 쿼리가 순차 I/O를 유발할 수 있습니다.

8.2 인덱스란?=============

218쪽) 
1.DBMS의 인덱스의 자료구조는 SortedList라는 자료구조이다.
2.SortedList 장점은 데이터 INSERT, UPDATE, DELETE 작업이 될때마다 항상 값을 정렬해야 하므로 저장하는 과정이 복자하고 느리지만, 이미 정렬돼 있어서 Select을 빠르게 할 수 있다.

※결론적으로 DBMS에서 인덱스는 데이터의 저장 성능을 희생하고, 그 대신 데이터 읽기 속도를 높이는 기능이다. 모든 컬럼에 인덱스를 생성하면 저장 성능이 떨어지고 크기가 비대해져 오히려 역효과만 불러올 수 있다.

219쪽) 
1.인덱스는 데이터를 관리하는 방식(알고리즘)과 중복 값의 허용 여부 등에 따라 여러가지로 나눠볼 수 있다.

1.1 인덱스를 역할별로 구분해 본다면 프라머리 키(primary key)와 보조 키(Secondary key)로 구분할 수 있다.

프라이머리 키 => 레코드를 대표하는 컬럼의 값으로 만들어진 인덱스를 의미한다. 이를 식별자라고도 부분다. 1.값이 NULL을 허용하지 않으며 2.중복을 허용하지 않는 것이 특징이다.

보조 키 => 프라이머리 키를 제외한 나머지 모든 인덱스는 세컨더리 인덱스로 분류한다. 그중 유니크 인덱스는 프라이머리 키와 성격이 비슷하고 프라이머리 키를 대체해서 사용할 수 있어서 "대체 키"라고도 부른다. 1.유니크 키는 NULL을 허용한다.


1.2 데이터 저장 방식(알고리즘)별로 구분할 경우 상당히 많으 분류가 가능하겠지만 대표적으로 B-Tree 인덱스와 Hash 인덱스로 구분할 수 있다.

B-Tree 인덱스 => B-Tree알고리즘은 가장 일반적으로 사용되는 인덱스 알고리즘이다. 상당히 오래전에 도입된 알고리즘이다. B-Tree 인덱스는 칼럼의 값을 변형하지 않고 원래의 값을 이용해 인덱싱하는 알고리즘이다. 

Hash 인덱스 => 칼럼의 값으로 해시값을 계산해서 인덱싱하는 알고리즘으로 매우 빠른 검색을 지원한다. 하지만 값을 변형해서 인덱싱하므로 전방일치와 같은 값의 일부만 검색하거나 범위를 검색할 때는 해시 인덱스를 사용할 수 없다. 주로 메모리 기반의 DB에서 많이 사용한다.

1.3 데이터의 중복 허용 여부로 분류하면 유니크 인덱스와 유니크하지 않은 인덱스로 구분할 수 있다.

인덱스가 유니크한지 아닌지는 단순히 해석하면 같은 값이 1개만 존재하는지 1개이상 존재할 수 있는지를 의미하지만, 실제 DBMS의 쿼리를 실행해야 하는 옵티마이저에게는 상당히 중요한문제이며 유니크 인덱스에 대해 동등 조건(=)으로 검색한다는 것은 항상 1건의 레코드만 찾으면 더 찾지 않아도 된다는 것을 옵티마이저에게 알려주는 효과를 낸다.

옵티마이저: DBMS 옵티마이저는 쿼리 실행 계획을 결정하여 최적의 성능을 추구하는 소프트웨어 컴포넌트로, 쿼리의 최적화와 실행에 관여합니다.