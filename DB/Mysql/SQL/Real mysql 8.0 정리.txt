참고: Real MySQL 8.0 1편
기간: 2024-01-09 ~

3장 DB 사용자 및 권한=================================================

#사용자 계정 생성
CREATE USER 'ID입력'@'%'
	IDENTIFIED WITH 'mysql_native_password' BY '패스워드입력'; // WITH 뒤에 인증방식 지정, WITH 옵션 없으면 시스템 글로벌 설정값에 따라감

인증방식 : Caching SHA-2(256비트) Pluggable Authentication 
- 이 인증방식을 사용하려면 SSL/TLS 또는 RSA 키페어를 반드시 사용해야 하는데 이를 위해 클라이언트에서 접속할 때 SSL 옵션을 활성화해야한다.
	
8장 인덱스=================================================
8.1 디스크 읽기 방식 =============

하드 디스크 드라이브(HDD)와 솔리드 스테이드 드라이버(SSD)
컴퓨터에서 CPU나 메모리 같은 주요 장치는 대부분 전자식 창지지만 HDD는 기계식 장치다. 그래서 데이터베이스 서버에서는 항상 디스트 장치가 병목이된다.
이러한 기계식 장치를 대체하기 위해 전자식 저장매체인 SSD가 많이 출시되고 있다.

SSD는 기존 하드 디스크 드라이브에서 데이터 저장용 플래터(원판)을 제거하고 대신 플래시 메모리를 장착하고 있다.
그래서 디스크 원찬을 기계적으로 회전시킬 필요가 없으므로 아주 빨리 데이터를 읽고 쓸 수있다.

플래시 메모리는 전원이 공급되지 않아도 데이터가 삭제되지않는다.

#초당 처리 횟수
CPU> 메모리 D램 > 플래시 메모리 > HDD

HDD와 SSD의 성능 차이는 랜덤I/O에서는 SSD가 훨씬 빠르고, 순차I/O는 SSD가 조금빠르거나 비슷하다

8.1.2 랜덤I/O와 순차I/O=============
랜덤 I/O =>
랜덤 I/O는 데이터를 임의의 위치에서 읽거나 쓰는 패턴을 나타냅니다.
주로 랜덤한 키를 기반으로 데이터베이스의 레코드를 읽거나 쓰는 경우에 해당합니다. 예를 들어, 특정 레코드의 고유한 식별자나 키를 사용하여 해당 레코드에 직접 액세스하는 경우 랜덤 I/O가 발생할 수 있습니다.
예를 들어, 주문 번호나 사용자 ID에 기반하여 특정 주문이나 사용자의 정보를 가져오는 쿼리가 랜덤 I/O를 유발할 수 있습니다.

순차 I/O =>
순차 I/O는 데이터를 순차적인 순서로 읽거나 쓰는 패턴을 나타냅니다.
전체 테이블을 스캔하거나 범위 쿼리를 통해 일련의 레코드에 접근하는 경우 순차 I/O가 발생할 수 있습니다.
예를 들어, 모든 주문을 날짜순으로 정렬하여 가져오는 쿼리가 순차 I/O를 유발할 수 있습니다.

8.2 인덱스란?=============

218쪽) 
1.DBMS의 인덱스의 자료구조는 SortedList라는 자료구조이다.
2.SortedList 장점은 데이터 INSERT, UPDATE, DELETE 작업이 될때마다 항상 값을 정렬해야 하므로 저장하는 과정이 복자하고 느리지만, 이미 정렬돼 있어서 Select을 빠르게 할 수 있다.

※결론적으로 DBMS에서 인덱스는 데이터의 저장 성능을 희생하고, 그 대신 데이터 읽기 속도를 높이는 기능이다. 모든 컬럼에 인덱스를 생성하면 저장 성능이 떨어지고 크기가 비대해져 오히려 역효과만 불러올 수 있다.

219쪽) 
1.인덱스는 데이터를 관리하는 방식(알고리즘)과 중복 값의 허용 여부 등에 따라 여러가지로 나눠볼 수 있다.

1.1 인덱스를 역할별로 구분해 본다면 프라머리 키(primary key)와 보조 키(Secondary key)로 구분할 수 있다.

프라이머리 키 => 레코드를 대표하는 컬럼의 값으로 만들어진 인덱스를 의미한다. 이를 식별자라고도 부분다. 1.값이 NULL을 허용하지 않으며 2.중복을 허용하지 않는 것이 특징이다.
보조 키 => 프라이머리 키를 제외한 나머지 모든 인덱스는 세컨더리 인덱스로 분류한다. 그중 유니크 인덱스는 프라이머리 키와 성격이 비슷하고 프라이머리 키를 대체해서 사용할 수 있어서 "대체 키"라고도 부른다. 1.유니크 키는 NULL을 허용한다.


1.2 데이터 저장 방식(알고리즘)별로 구분할 경우 상당히 많으 분류가 가능하겠지만 대표적으로 B-Tree 인덱스와 Hash 인덱스로 구분할 수 있다.

B-Tree 인덱스 => B-Tree알고리즘은 가장 일반적으로 사용되는 인덱스 알고리즘이다. 상당히 오래전에 도입된 알고리즘이다. B-Tree 인덱스는 칼럼의 값을 변형하지 않고 원래의 값을 이용해 인덱싱하는 알고리즘이다. 
Hash 인덱스 => 칼럼의 값으로 해시값을 계산해서 인덱싱하는 알고리즘으로 매우 빠른 검색을 지원한다. 하지만 값을 변형해서 인덱싱하므로 전방일치와 같은 값의 일부만 검색하거나 범위를 검색할 때는 해시 인덱스를 사용할 수 없다. 주로 메모리 기반의 DB에서 많이 사용한다.

1.3 데이터의 중복 허용 여부로 분류하면 유니크 인덱스와 유니크하지 않은 인덱스로 구분할 수 있다.

인덱스가 유니크한지 아닌지는 단순히 해석하면 같은 값이 1개만 존재하는지 1개이상 존재할 수 있는지를 의미하지만, 실제 DBMS의 쿼리를 실행해야 하는 옵티마이저에게는 상당히 중요한문제이며 유니크 인덱스에 대해 동등 조건(=)으로 검색한다는 것은 항상 1건의 레코드만 찾으면 더 찾지 않아도 된다는 것을 옵티마이저에게 알려주는 효과를 낸다.
옵티마이저: DBMS 옵티마이저는 쿼리 실행 계획을 결정하여 최적의 성능을 추구하는 소프트웨어 컴포넌트로, 쿼리의 최적화와 실행에 관여합니다.


8.3 B-Tree 인덱스=============

B-Tree는 칼럼의 원래 값을 변형시키지 않고 인덱스 구조체 내엥서는 항상 정렬된 상태로 유지한다. 전문검색과 같은 특수한 요건이 아닌 경우에는 대부분 B-Tree를 사용할 정도로 일반적인 용도에 적합한 알고리즘이다.
여기서B약자는 Balanced를 의미합니다.

p.220)
B-Tree는 트리 구조의 최상위에 하나의 루트노드가 존재하고 그하위에 자식 노드가 붙어있는 형태다.
이 구조에서 가장 하위의 노드를 리프 노드라고 한다. 루트노드(Root node), 리프 노드(Leaf node)도 아닌 중간의 노드를 브랜치 노드(Branch node)라고 한다.
데이터 베이스에서 인덱스와 실제 데이터가 저장된 데이터는 따로 관리되는데, 인덱스의 리프 노드는 항상 실제 데이터 레코드를 찾아가기 위한 "주고값"을 가지고 있다.

인덱스 키 값은 모두 정렬되있지만 실제 데이터 파일은 정렬돼있지 않다. 즉, 레코드가 삭제되어 빈공간이 생기면 그다음의 INSERT는 가능한 한 삭제된 공간을 재활용하도록 DBMS가 설계되기 때문에 항상 INSERT된 순서로 저장되지 않는다.
대부분의 RDBMS의 데이터 파일에서 레코드는 특정 기준으로 정렬되지 않고 임의의 순서대로 저장되는 것이 일반적이다.
하지만 InnoDB 테이블에서 레코드는 클러스터되어 디스크에 저장되므로 기본적으로 프라이머리 키 순서로 정렬되어 저장된다. InnoDB에서는 디폴트로 클러스터링 테이블이 생성된다.

📍클러스터링이란 비슷한 값을 최대한 모아서 저장하는 방식을 의미한다.

p.223)
InnoDB 테이블의 인덱스의 데이터 파일관계에서 InnoDB 스토리지 엔진을 사용하는 테이블에서는 프라이머리 키가 ROWID 의 역할을 한다.
ROWID란 물리적 주소를 말한다.

MyISAN 테이블은 세컨더리 인덱스가 물리적인 주소를 가지는 반면에 InnoDB 테이블은 프라이머리 키(논리적 데이터)를 주소(ROWID)처럼 사용하기 때문에 논리적인 주소를 가진다고 볼 수 있다.

즉. InnoDB 스토리지 엔진에서는 모든 세컨더리 인덱스 검색에서 데이터 레코드를 읽기 위해서는 반드시 프라이머리 키를 저장하고 있는 B-Tree를 다시 한번 검색해야한다.

8.3.2 B-Tree 인덱스 키 추가 및 삭제
인덱스 키 추가나 삭제가 어떨게 처리되는지 알아두면 쿼리의 성능을 쉽게 예측할 수 있을 것이다. 또한 주의해야 할 사항도 함께 살펴보겠다.

8.3.2.1 인덱스 키 추가
1.B-Tree에 저장될 때는 저장될 키값을 이용해 B-Tree상의 적정한 위치를 검색해야 한다.
2. 위치가 결정되면 레코드의 키 값과 대상 레코드의 주소 정보를 B-Tree의 리프노드에 저장한다. 만약 리프노드가 꽉 차서 더는 저장할 수 없을 때는 리프노드가 분리돼야 하는데, 이는 상위 브랜치 노드까지 처리의 범위가 넓어진다.

이러한 작업 탓에 상대적으로 쓰기 작업(새로운 키 추가하는 작업)에 비용이 많이 든다.


8.3.2.2 인덱스 키 삭제
해당 키 값이 저장된 B-Tree의 리프 노드를 찾아서 삭제 마크 마킹처리를 한다. 이렇게 삭제 마킹된 인덱스 키 공간은 계속 방치하거나 재활용 할 수 있다.
인덱스 키 삭제로 인한 마킹 작업 또한 디스크 쓰기가 필요하므로 이 작업 역시 디스크 I/O가 필요한 작업이다.

8.3.2.3 인덱스 키 변경
기존 인덱스 키 값을 삭제한 후 새로운 인덱스 키 값을 추가하는 작업으로 처리되고, InnoDB 스토리지 엔진을 사용하는 테이블에 대해서는 이 작업 모두 체인지 버퍼를 활용해 지연 처리 될 수 있다.

8.3.2.4 인덱스 키 검색
INSERT, UPDATE, DELETE 작업을 할 때 인덱스 관리에 따르는 추가 비용을 감당하면서 인덱스를 구축하는 이유는 바로 빠른검색을 위해서다.
인덱스 트리 탐색은 SELECT에서만 사용하는 것이 아니라 UPDATE나 DELETE를 처리하기 위해 항상 해당 레코드를 먼저 검색해야할 경우에도 사용된다.

B-Tree 인덱스를 이용한 검색은 100% 일치 또는 값의 앞부분만 일치하는 경우에 사용할 수 있다.
부등호 비교 조건에서도 인덱스를 활용할 수 있지만, 인덱스를 구성하는 키 값의 뒷부분만 검색하는 용도로는 인덱스를 사용할 수 없다.
📌인덱스를 이용한 검색에서 중요한 사실은 인덱스의 키 값에 변형이 가해진 후 비교되는 경우에는 절대 B-Tree의 빠른 검색 기능을 사용할 수 없다는 것이다. 변형이 된 값은 B-Tree인덱스에 존재하는 값이 아니다.

따라서 함수나 연산을 수행한 결과로 정렬한다거나 검색하는 작업은 인덱스를 타지 못한다.

8.3.3.1 인덱스 키 값의 크기
p.226)

B-Tree 인덱스는 인덱스를 구성하는 칼럼의 크기와 레코드의 건수, 그리고 유니크한 인덱스 키 값의 개수 등에 의해 검색이나 변경 작업의 성능이 영향을 받는다.

InnoDB 스토리지 엔진은 디스크에 데이터를 저장하는 가장 기본 단위를 페이지(Page) 또는 블록(Block)이라고 하며, 디스크의 모든 읽기 및 쓰기 작업의 최소 작업 단위가 된다.
인덱스도 결국 페이지 단위로 관리되며, 루트노드 & 브랜치 노드 & 리프 노드를 구분한 기준이 바로 페이지 단위다.

일반적인 DBMS B-Tree는 자식 노드의 개수가 가변적인 구조다.
mysql의 B-Tree는 자식 노드의 개수는 인덱스의 페이지 크기와 키 값의 크기에 따라 결정된다.
myqsl 5.7버전부터는 Innodb 스토리지  엔진의 페이지 크그릴 innodb_page_size 시스템 변수를 이용해 4KB ~ 64KB 사이 값 선택 가능하지만 기본은 대략 16KB다.

인덱스를 구성하는 키 값의 크기가 커지면 디스크로부터 읽어야하는 횟수가 늘어나고, 그만큼 느려진다는 것을 의미한다. 또한 인덱스 키 값의 길이가 길어진다는 것은 전체적인 인덱스의 크기가 커진다는 것을 의미한다.
InnoDB의 버퍼 풍이나 MyISAM의 키 캐시 영역은 크기가 제한적이기 때문에 하나의 레코드를 위한 인덱스 크키가 커지면 커질수록 메모리에 캐시해 둘 수 있는 레코드 수는 줄어준다 그렇게 되면 자연히 메모리의 효율이 떨어지는 결과를 가져온다.

8.3.3.2 B-Tree 깊이
B-Tree  인덱스의 깊이는 상당히 중요하지만 직접 제어할 방법은 없다. B-Tree 깊이는 Mysql에서 값을 검색할 때 몇 번이나 랜덤하게 디스크를 읽어야하는지와 관련된 문제다.
결론적으로 인덱스 키 값의 크기가 커지면 커질수록 하나의 인덱스 페이지가 담을 수 있는 인덱스 키 값의 개수가 적어지도 그때문에 같은 레코드 건수라 하더라고 B-Tree의 깊이가 깊어져서 디스크 읽기가 더 많이 필요하게 된다는 것을 의미한다.

가능하면 인덱스 키값의 크기를 작게 만드는 것이 좋다. 깊이는 제어할 수 없기 때문에

8.3.3.3 선택도(기수성)
인덱스에서 선택도(Selectivity) 또는 기수성(Cardinality)은 거의 같은 의미로 사용되며, 모든 인덱스 키 값 가운데 유니크한 값의 수를 의미한다.
전체 인덱스 키값은 100개인데 그중에서 유니크한 값의 수는 10개 라면 기수성은 10이다.
인덱스 키 값 가운데 중복된 값이 많아지면 많아질수록 기수성은 낮아지고 동시에 선택도 또한 떨어진다.

📌인덱스는 기수성이 높을수록 선택도도 높을수록 검색 대상이 줄어들기 때문에 그만큼 빠르게 처리된다.
즉, 인덱스 추가할 컬럼을 선택한때 중복이 최대한 적은 값을 담는 컬럼을 선택하는 것이 기수성을 높이는 방법이 될듯합니다.

인덱스에서 유니크한 값의 개수는 인덱스나 쿼리의 효율성에 큰 영향을 미친다.
