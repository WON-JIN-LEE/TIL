참고: Real MySQL 8.0 1편
기간: 2024-01-09 ~

3장 DB 사용자 및 권한=================================================

#사용자 계정 생성
CREATE USER 'ID입력'@'%'
	IDENTIFIED WITH 'mysql_native_password' BY '패스워드입력'; // WITH 뒤에 인증방식 지정, WITH 옵션 없으면 시스템 글로벌 설정값에 따라감

인증방식 : Caching SHA-2(256비트) Pluggable Authentication 
- 이 인증방식을 사용하려면 SSL/TLS 또는 RSA 키페어를 반드시 사용해야 하는데 이를 위해 클라이언트에서 접속할 때 SSL 옵션을 활성화해야한다.
	
8장 인덱스=================================================
8.1 디스크 읽기 방식 =============

하드 디스크 드라이브(HDD)와 솔리드 스테이드 드라이버(SSD)
컴퓨터에서 CPU나 메모리 같은 주요 장치는 대부분 전자식 창지지만 HDD는 기계식 장치다. 그래서 데이터베이스 서버에서는 항상 디스트 장치가 병목이된다.
이러한 기계식 장치를 대체하기 위해 전자식 저장매체인 SSD가 많이 출시되고 있다.

SSD는 기존 하드 디스크 드라이브에서 데이터 저장용 플래터(원판)을 제거하고 대신 플래시 메모리를 장착하고 있다.
그래서 디스크 원찬을 기계적으로 회전시킬 필요가 없으므로 아주 빨리 데이터를 읽고 쓸 수있다.

플래시 메모리는 전원이 공급되지 않아도 데이터가 삭제되지않는다.

#초당 처리 횟수
CPU> 메모리 D램 > 플래시 메모리 > HDD

HDD와 SSD의 성능 차이는 랜덤I/O에서는 SSD가 훨씬 빠르고, 순차I/O는 SSD가 조금빠르거나 비슷하다

8.1.2 랜덤I/O와 순차I/O=============
랜덤 I/O =>
랜덤 I/O는 데이터를 임의의 위치에서 읽거나 쓰는 패턴을 나타냅니다.
주로 랜덤한 키를 기반으로 데이터베이스의 레코드를 읽거나 쓰는 경우에 해당합니다. 예를 들어, 특정 레코드의 고유한 식별자나 키를 사용하여 해당 레코드에 직접 액세스하는 경우 랜덤 I/O가 발생할 수 있습니다.
예를 들어, 주문 번호나 사용자 ID에 기반하여 특정 주문이나 사용자의 정보를 가져오는 쿼리가 랜덤 I/O를 유발할 수 있습니다.

순차 I/O =>
순차 I/O는 데이터를 순차적인 순서로 읽거나 쓰는 패턴을 나타냅니다.
전체 테이블을 스캔하거나 범위 쿼리를 통해 일련의 레코드에 접근하는 경우 순차 I/O가 발생할 수 있습니다.
예를 들어, 모든 주문을 날짜순으로 정렬하여 가져오는 쿼리가 순차 I/O를 유발할 수 있습니다.

8.2 인덱스란?=============

218쪽) 
1.DBMS의 인덱스의 자료구조는 SortedList라는 자료구조이다.
2.SortedList 장점은 데이터 INSERT, UPDATE, DELETE 작업이 될때마다 항상 값을 정렬해야 하므로 저장하는 과정이 복자하고 느리지만, 이미 정렬돼 있어서 Select을 빠르게 할 수 있다.

※결론적으로 DBMS에서 인덱스는 데이터의 저장 성능을 희생하고, 그 대신 데이터 읽기 속도를 높이는 기능이다. 모든 컬럼에 인덱스를 생성하면 저장 성능이 떨어지고 크기가 비대해져 오히려 역효과만 불러올 수 있다.

219쪽) 
1.인덱스는 데이터를 관리하는 방식(알고리즘)과 중복 값의 허용 여부 등에 따라 여러가지로 나눠볼 수 있다.

1.1 인덱스를 역할별로 구분해 본다면 프라머리 키(primary key)와 보조 키(Secondary key)로 구분할 수 있다.

프라이머리 키 => 레코드를 대표하는 컬럼의 값으로 만들어진 인덱스를 의미한다. 이를 식별자라고도 부분다. 1.값이 NULL을 허용하지 않으며 2.중복을 허용하지 않는 것이 특징이다.
보조 키 => 프라이머리 키를 제외한 나머지 모든 인덱스는 세컨더리 인덱스로 분류한다. 그중 유니크 인덱스는 프라이머리 키와 성격이 비슷하고 프라이머리 키를 대체해서 사용할 수 있어서 "대체 키"라고도 부른다. 1.유니크 키는 NULL을 허용한다.


1.2 데이터 저장 방식(알고리즘)별로 구분할 경우 상당히 많으 분류가 가능하겠지만 대표적으로 B-Tree 인덱스와 Hash 인덱스로 구분할 수 있다.

B-Tree 인덱스 => B-Tree알고리즘은 가장 일반적으로 사용되는 인덱스 알고리즘이다. 상당히 오래전에 도입된 알고리즘이다. B-Tree 인덱스는 칼럼의 값을 변형하지 않고 원래의 값을 이용해 인덱싱하는 알고리즘이다. 
Hash 인덱스 => 칼럼의 값으로 해시값을 계산해서 인덱싱하는 알고리즘으로 매우 빠른 검색을 지원한다. 하지만 값을 변형해서 인덱싱하므로 전방일치와 같은 값의 일부만 검색하거나 범위를 검색할 때는 해시 인덱스를 사용할 수 없다. 주로 메모리 기반의 DB에서 많이 사용한다.

1.3 데이터의 중복 허용 여부로 분류하면 유니크 인덱스와 유니크하지 않은 인덱스로 구분할 수 있다.

인덱스가 유니크한지 아닌지는 단순히 해석하면 같은 값이 1개만 존재하는지 1개이상 존재할 수 있는지를 의미하지만, 실제 DBMS의 쿼리를 실행해야 하는 옵티마이저에게는 상당히 중요한문제이며 유니크 인덱스에 대해 동등 조건(=)으로 검색한다는 것은 항상 1건의 레코드만 찾으면 더 찾지 않아도 된다는 것을 옵티마이저에게 알려주는 효과를 낸다.
옵티마이저: DBMS 옵티마이저는 쿼리 실행 계획을 결정하여 최적의 성능을 추구하는 소프트웨어 컴포넌트로, 쿼리의 최적화와 실행에 관여합니다.


8.3 B-Tree 인덱스=============

B-Tree는 칼럼의 원래 값을 변형시키지 않고 인덱스 구조체 내엥서는 항상 정렬된 상태로 유지한다. 전문검색과 같은 특수한 요건이 아닌 경우에는 대부분 B-Tree를 사용할 정도로 일반적인 용도에 적합한 알고리즘이다.
여기서B약자는 Balanced를 의미합니다.

p.220)
B-Tree는 트리 구조의 최상위에 하나의 루트노드가 존재하고 그하위에 자식 노드가 붙어있는 형태다.
이 구조에서 가장 하위의 노드를 리프 노드라고 한다. 루트노드(Root node), 리프 노드(Leaf node)도 아닌 중간의 노드를 브랜치 노드(Branch node)라고 한다.
데이터 베이스에서 인덱스와 실제 데이터가 저장된 데이터는 따로 관리되는데, 인덱스의 리프 노드는 항상 실제 데이터 레코드를 찾아가기 위한 "주고값"을 가지고 있다.

인덱스 키 값은 모두 정렬되있지만 실제 데이터 파일은 정렬돼있지 않다. 즉, 레코드가 삭제되어 빈공간이 생기면 그다음의 INSERT는 가능한 한 삭제된 공간을 재활용하도록 DBMS가 설계되기 때문에 항상 INSERT된 순서로 저장되지 않는다.
대부분의 RDBMS의 데이터 파일에서 레코드는 특정 기준으로 정렬되지 않고 임의의 순서대로 저장되는 것이 일반적이다.
하지만 InnoDB 테이블에서 레코드는 클러스터되어 디스크에 저장되므로 기본적으로 프라이머리 키 순서로 정렬되어 저장된다. InnoDB에서는 디폴트로 클러스터링 테이블이 생성된다.

📍클러스터링이란 비슷한 값을 최대한 모아서 저장하는 방식을 의미한다.

p.223)
InnoDB 테이블의 인덱스의 데이터 파일관계에서 InnoDB 스토리지 엔진을 사용하는 테이블에서는 프라이머리 키가 ROWID 의 역할을 한다.
ROWID란 물리적 주소를 말한다.

MyISAN 테이블은 세컨더리 인덱스가 물리적인 주소를 가지는 반면에 InnoDB 테이블은 프라이머리 키(논리적 데이터)를 주소(ROWID)처럼 사용하기 때문에 논리적인 주소를 가진다고 볼 수 있다.

즉. InnoDB 스토리지 엔진에서는 모든 세컨더리 인덱스 검색에서 데이터 레코드를 읽기 위해서는 반드시 프라이머리 키를 저장하고 있는 B-Tree를 다시 한번 검색해야한다.

8.3.2 B-Tree 인덱스 키 추가 및 삭제
인덱스 키 추가나 삭제가 어떨게 처리되는지 알아두면 쿼리의 성능을 쉽게 예측할 수 있을 것이다. 또한 주의해야 할 사항도 함께 살펴보겠다.

8.3.2.1 인덱스 키 추가
1.B-Tree에 저장될 때는 저장될 키값을 이용해 B-Tree상의 적정한 위치를 검색해야 한다.
2. 위치가 결정되면 레코드의 키 값과 대상 레코드의 주소 정보를 B-Tree의 리프노드에 저장한다. 만약 리프노드가 꽉 차서 더는 저장할 수 없을 때는 리프노드가 분리돼야 하는데, 이는 상위 브랜치 노드까지 처리의 범위가 넓어진다.

이러한 작업 탓에 상대적으로 쓰기 작업(새로운 키 추가하는 작업)에 비용이 많이 든다.

MyISAM이나 MEMOMRY 스토리지 엔진을 사용하는 테이블에서는 INSERT 문장이 실행되면 즉시 새로운 키 값을 B-Tree 인덱스에 변경한다.
하지만 InnoDB 스토리지 엔진은 이 작업을 조금 더 지능적으로 처리하는데 필요하다면 인덱스 키 추가 작업을 지연시켜 나중에 처리할 수 있다.


8.3.2.2 인덱스 키 삭제
해당 키 값이 저장된 B-Tree의 리프 노드를 찾아서 삭제 마크 마킹처리를 한다. 이렇게 삭제 마킹된 인덱스 키 공간은 계속 방치하거나 재활용 할 수 있다.
인덱스 키 삭제로 인한 마킹 작업 또한 디스크 쓰기가 필요하므로 이 작업 역시 디스크 I/O가 필요한 작업이다.

8.3.2.3 인덱스 키 변경
기존 인덱스 키 값을 삭제한 후 새로운 인덱스 키 값을 추가하는 작업으로 처리되고, InnoDB 스토리지 엔진을 사용하는 테이블에 대해서는 이 작업 모두 체인지 버퍼를 활용해 지연 처리 될 수 있다.

8.3.2.4 인덱스 키 검색
INSERT, UPDATE, DELETE 작업을 할 때 인덱스 관리에 따르는 추가 비용을 감당하면서 인덱스를 구축하는 이유는 바로 빠른검색을 위해서다.
인덱스 트리 탐색은 SELECT에서만 사용하는 것이 아니라 UPDATE나 DELETE를 처리하기 위해 항상 해당 레코드를 먼저 검색해야할 경우에도 사용된다.

B-Tree 인덱스를 이용한 검색은 100% 일치 또는 값의 앞부분만 일치하는 경우에 사용할 수 있다.
부등호 비교 조건에서도 인덱스를 활용할 수 있지만, 인덱스를 구성하는 키 값의 뒷부분만 검색하는 용도로는 인덱스를 사용할 수 없다.
📌인덱스를 이용한 검색에서 중요한 사실은 인덱스의 키 값에 변형이 가해진 후 비교되는 경우에는 절대 B-Tree의 빠른 검색 기능을 사용할 수 없다는 것이다. 변형이 된 값은 B-Tree인덱스에 존재하는 값이 아니다.

따라서 함수나 연산을 수행한 결과로 정렬한다거나 검색하는 작업은 인덱스를 타지 못한다.

8.3.3.1 인덱스 키 값의 크기
p.226)

B-Tree 인덱스는 인덱스를 구성하는 칼럼의 크기와 레코드의 건수, 그리고 유니크한 인덱스 키 값의 개수 등에 의해 검색이나 변경 작업의 성능이 영향을 받는다.

InnoDB 스토리지 엔진은 디스크에 데이터를 저장하는 가장 기본 단위를 페이지(Page) 또는 블록(Block)이라고 하며, 디스크의 모든 읽기 및 쓰기 작업의 최소 작업 단위가 된다.
인덱스도 결국 페이지 단위로 관리되며, 루트노드 & 브랜치 노드 & 리프 노드를 구분한 기준이 바로 페이지 단위다.

일반적인 DBMS B-Tree는 자식 노드의 개수가 가변적인 구조다.
mysql의 B-Tree는 자식 노드의 개수는 인덱스의 페이지 크기와 키 값의 크기에 따라 결정된다.
myqsl 5.7버전부터는 Innodb 스토리지  엔진의 페이지 크그릴 innodb_page_size 시스템 변수를 이용해 4KB ~ 64KB 사이 값 선택 가능하지만 기본은 대략 16KB다.

인덱스를 구성하는 키 값의 크기가 커지면 디스크로부터 읽어야하는 횟수가 늘어나고, 그만큼 느려진다는 것을 의미한다. 또한 인덱스 키 값의 길이가 길어진다는 것은 전체적인 인덱스의 크기가 커진다는 것을 의미한다.
InnoDB의 버퍼 풍이나 MyISAM의 키 캐시 영역은 크기가 제한적이기 때문에 하나의 레코드를 위한 인덱스 크키가 커지면 커질수록 메모리에 캐시해 둘 수 있는 레코드 수는 줄어준다 그렇게 되면 자연히 메모리의 효율이 떨어지는 결과를 가져온다.

8.3.3.2 B-Tree 깊이
B-Tree  인덱스의 깊이는 상당히 중요하지만 직접 제어할 방법은 없다. B-Tree 깊이는 Mysql에서 값을 검색할 때 몇 번이나 랜덤하게 디스크를 읽어야하는지와 관련된 문제다.
결론적으로 인덱스 키 값의 크기가 커지면 커질수록 하나의 인덱스 페이지가 담을 수 있는 인덱스 키 값의 개수가 적어지도 그때문에 같은 레코드 건수라 하더라고 B-Tree의 깊이가 깊어져서 디스크 읽기가 더 많이 필요하게 된다는 것을 의미한다.

가능하면 인덱스 키값의 크기를 작게 만드는 것이 좋다. 깊이는 제어할 수 없기 때문에

8.3.3.3 선택도(기수성)
인덱스에서 선택도(Selectivity) 또는 기수성(Cardinality)은 거의 같은 의미로 사용되며, 모든 인덱스 키 값 가운데 유니크한 값의 수를 의미한다.
전체 인덱스 키값은 100개인데 그중에서 유니크한 값의 수는 10개 라면 기수성은 10이다.
인덱스 키 값 가운데 중복된 값이 많아지면 많아질수록 기수성은 낮아지고 동시에 선택도 또한 떨어진다.

📌인덱스는 기수성이 높을수록 선택도도 높을수록 검색 대상이 줄어들기 때문에 그만큼 빠르게 처리된다.
즉, 인덱스 추가할 컬럼을 선택한때 중복이 최대한 적은 값을 담는 컬럼을 선택하는 것이 기수성을 높이는 방법이 될듯합니다.

인덱스에서 유니크한 값의 개수는 인덱스나 쿼리의 효율성에 큰 영향을 미친다.


8.3.3.4 읽어야 하는 레코드의 건수
인덱스를 통해 읽어야 할 레코드의 건수(옵티마이저가 판단한 예상 건수)가 전체 테이블 레코드의 20~25%를 넘어서면 인덱스를 이용하지 않고 테이블 모두 직접 읽어서 필요한 레코드만 가려내는 방식으로 처리하는 것이 효율적이다.
전체 100만 건의 레코드 가운데 50만 건을 읽어야 하는 작업은 인덱스의 손입 분기점 보다 훨씬 크기 때문에 MySQL 옵티마이저는 인덱스를 이용하지 않고 직접 테이블을 처음부터 끝까지 읽어서 처리할 것이다.

8.3.4 B-Tree 인덱스를 통한 데이터 읽기
MySQL(스토리지 엔진)이 어떻게 인덱스를 경유해서 실제 레코드를 읽어 내는지 알아야한 다.
대표적인 3가지 방법을 살펴보겠다.

8.3.4.1 인덱스 레인지 스캔
인덱스 레인지 스캔은 인덱스 접근 방법중에 가장 대표적인 접근 방식으로 뒤에서 설명할 두가지 방법보다는 빠른 방법이다.

인덱스 레인지 스캔은 검색해야 할 인덱스의 범위가 결정됐을 때 사용하는 방식다.
스캔: 차례대로 쭉 읽는 것을 말한다.
만약 스캔을 하다가 리프노드의 끝까지 읽으면 리프노드 간의 링크를 이용해 다음 리프 노드를 찾아서 다시 스캔한다. 스캔을 멈춰야할 위치에 다다르면 지금까지 읽은 레코드를 사용자에게 반환하고 쿼리를 끝낸다.

중요한 것은 어떤 방식으로 스캔하든 관계없이, 해당 인덱스를 구성하는 칼럼의 정순 또는 역순으로 정렬된 상태로 레코드를 가져온다는 것이다. 이는 별도 정렬과정이 수반되는 것이 아니라 인덱스 자체의 정렬 특성 때문에 자동으로 그렇게 된다.
즉, 인덱스 키의 정렬 상태로 사용자에게 반환해준다.
또 한가지 중요한 것은 인덱스의 리프노드에서 검색 조건에 일치하는 건들이 데이터 파일에서 레코드를 읽어오는 과정이 필요하다는 것이다.
이때 리프노드에 저장된 레코드 주소로 데이터 파일의 레코드를 읽어오는데 레코드 한 건 한 건 단위로 랜덤 I/O가 한 번씩 일어난다. 3건이 검색조건에 일치하면 랜덤I/O 3번이 발생한다.

레인지 스캔 최종 정리
1. 인덱스에서 조건을 만족하는 값이 저장된 위치를 찾는다. 이과정을 인덱스 탐색(index seek)이라 한다.
2. 1번에서 탐색된 위치부터 필요한 만큼 인덱스를 차례대로 쭉읽는다. 이과정을 인덱스 스캔(index scan)이라고 한다.
3. 2번에서 읽어 들인 인덱스 키와 레코드 주소를 이용해 레코드가 저장된 페이지를 가져오고, 최종 레코드를 읽어온다.

만약 사용한 쿼리에서 필요로 하는 데이터에 따라 3번 과정은 필요하지 않을 수 있는데, 이를 커버링 인덱스라고 한다.
커버링 인덱스로 처리되는 쿼리는 디스크의 레코드를 읽지 않아도 되기 때문에 랜덤 읽기가 상당히 줄어들고 그만큼 빠르다.


SHOW STATUS LIKE 'Handler_%';
위 쿼리로 1,2번 단계의 작업이 얼마나 수행됐는지 알 수 있다.
Handler_read_key : 1번 단계 실행된 횟수
Handler_read_next : 인덱스 정순으로 읽은 레코드 건수
Handler_read_prev : 인덱스 역순으로 읽은 레코드 건수
Handler_read_first : 인덱스의 첫 번째 레코드를 읽은 횟수
Handler_read_last : 인덱스의 마지막 번째 레코드를 읽은 횟수


8.3.4.2 인덱스 풀 스캔
인덱스의 처음부터 끝까지 모두 읽는 방식을 인덱스 풀 스캔이라고 한다.
대표저긍로 쿼리 조건절에 사용되는 칼럼이 인덱스의 첫번째 칼럼이 아닌 경우 인덱스 풀 스캔방식이 사용된다.
예를 들어, 인덱스는 (A,B,C)칼럼의 순서로 만들어져 있지만 쿼리의 조건절은 B칼럼이나 C칼럼으로 검색하는 경우다.

일반적으로 인덱스의 크키는 테이블의 크기보다 작으므로 직접 테이블을 처음부터 끝까지 읽는 것보다는 인덱스만 읽는 것이 효율적이다.
만약 쿼리가 인덱스에 명시된 칼러만으로 조건ㅇ을 처리할 수 있는 경우 이 방식이 사용된다. 하지만 데이터 레코드까지 모두 읽어야 한다면 절대 이 방식으로 처리되지 않는다.

먼저 인덱스 리프 노드의 제일 앞 또는 제일뒤로 이동한 후, 인덱스의 리프노드를 연결하는 링크드 리스트를 따라서 처음부터 끝까지 스캔하는 방식을 인덱스 풀 스캔이라고 한다.

이 방식은 인덱스 레ㅈ인지 스캔보다는 빠르지 않지만 테이블 풀 스캔보다는 효율적이다.
인덱스의 전체 크기는 테이블 자체의 크기보다는 훨씬 작으므로 인덱스 풀 스캔은 테이블 전체를 읽는 것보다는 적은 디스크 I/O로 쿼리를 처리할 수 있다.

8.3.4.3 루스 인덱스 스캔
오라클과 같은 DBMS의 "인덱스 스킵 스캔"이라고 하는 기능과 작동 방식은 비슷하지만 MySQL에서는 이를 "루스 인덱스 스캔"이라고 한다.
루스 인덱스 스캔이란 말 그대로 느슨하게 또는 듬성듬성하게 인덱스를 읽는 것을 의미한다.
루스 인덱스 스캔은 인덱스 레인지 스캔과 비슷하게 작동하지만 중간에 필요치 않은 인덱스 키 값은 무시하고 다음으로 넘어가는 형태로 처리한다.

즉, 인덱스에서 WHERE 조건을 만족하는 범위 전체를 다 스캔할 필요가 없다는 것을 옵티마이저는 알고 있기 때문에 조건에 맞고하지 않는 레코드는 무시하고 다음 레코드로 이동한다.

8.3.4.4 인덱스 스킵 스캔
데이터베이스 서버에서 인덱스의 핵심은 값이 정렬돼 있다는 것이며, 이로 인해 인덱스를 구성하는 칼럼의순서가 매우 중요하다.

인덱스 스킵 스캔이란 인덱스 키를 A, B 컬럼으로 인덱스를 만든 후
쿼리 WHERE 조건절에 B에 대한 제약뿐일때 옵티마이저가 자동으로 A조건절을 쿼리에 심어서 인덱스를 타게 하는 기능이다.

Mysql8.0버전 부터는 옵티마이저가 자동적으로 인덱스 스킵 스캔 최적화 기능을 도와준다.
8.0버전 이전 버전에서도 인덱스 스킵 스캔과 비슷한 최적화를 수행하는 루스 인덱스 스캔이라는 기능이 있지만 이 스캔은 GROUP BY 작업을 처리하기 위해 인덱스를 사용하는 경우에만 적용할 수 있다.

쿼리 실행 계획에서 type칼럼이 index라고 표시된것은 인덱스를 처음부터 끝까지 모두 읽었다(풀 인덱스 스캔)는 의미이므로 인덱스를 비효율적으로 사용한 것이다.
만약에 여기서 SELECT 절에 인덱스에 있는 컬럼 이외의 값을 조회했을 시에는 테이블 풀 스캔을 실행했을 것이다.

쿼리 실행 계획에서 type칼럼이 range로 표시된것은 인덱스를 꼭 필요한 부분만 읽었다는 것을 의미한다.

인덱스 스킵 스캔은 MySQL8.0 버전에 새로이 도입된 기능이어서 단점이 존재하는데 다음과 같다.
- WHERE 조건절에 조건이 없는 인덱스의 선행 컬럼의 유니크한 값의 개수가 적어야한다.
- 쿼리가 인덱스에 존재하는 칼럼만으로 처리 가능해야함

8.3.4.5 다중 칼럼 인덱스
두개 이상의 칼럼으로 구성된 인덱스를 다중 칼럼 인덱스 또는 복합 컬럼 인덱스라고 한다.
루트 노드와 리프노드는 항상 존재한다 하지만 브랜치 노드는 실제로 데이터 레코드 건수가 작은 경우에는 노드가 없는 경우도 있을 수 있다.
다중 칼럼 인덱스에서는 인덱스 내에서 각 컬럼의 위치가 상당히 중요하다.

8.3.6 B-Tree 인덱스의 정렬 및 스캔 방향
인덱스를 생성할 때 설정한 정렬 규칙에 따라서 인덱스의 키 값은 항상 오름차순이거나 내림차순으로 정렬되어 저장된다.
사실 그 인덱스를 거꾸로 끝에서부터 읽으면 내림차순으로 정렬된 인덱스로도 사용될 수 있다. 인덱스를 어느 방향으로 읽을지는 쿼리에 따라 옵티마이저가 실시간으로 만들어내는 실행 계획에 따라 결정된다.

8.3.6.1 인덱스의 정렬
일반적인 DBMS에서는 인덱스를 생성하는 시점에 인덱스를 구성하는 각 컬럼의 정렬을 오름차순 또는 내림차순으로 설정할 수 있다.
MySQL5.7버전까지는 모두 오름차순 정렬만으로 인덱스가 생성됐다.
8.0부터는 다음과 같은 형태로의 정렬 순서를 혼합한 인덱스도 생성할 수 있다.
> CREATE INDEX ix_teamname_userscore ON employees (team_name ASC, user_score DESC);

8.3.6.1 인덱스 스캔 방향
인덱스 생성 시점에 오름차순 또는 내림차순으로 정렬이 결정되지만 쿼리가 그 인덱스를 사용하는 시점에 인덱스를 읽는 방향에 따라 오름차순 또는 내림차순 정렬 효과를 얻을 수 있다.
쿼리의 ORDER BY 처리나 MIN() 또는 MAX() 함수 등의 최적화가 필요한 경우에도 MySQL 옵티마이저는 인덱스의 읽기 방향을 전환해서 사용하도록 실행 계획을 만들어 낸다.

8.3.6.2 내림차순 인덱스
오름차순 인덱스: 작은 값의 인덱스 키가 B-Tree의 왼쪽으로 정렬된 인덱스
내림차순 인덱스: 큰 값의 인덱스 키가 B-Tree의 왼쪽으로 정렬된 인덱스
인덱스 정순 스캔: 인덱스 키의 크고 작음에 관계없이 인덱스 리프 노드의 왼쪽 페이지부터 오른쪽으로 스캔
인덱스 역순 스캔: 인덱스 키의 크고 작음에 관계없이 인덱스 리프 노드의 오른쪽 페이지부터 왼쪽으로 스캔

MySQL 서버의 InnoDB 스토리지 엔진에서 정순 스캔과 역순 스캔은 페이지간의 양방향 연결 고리를 통해 전진 또는 후진하느냐의 차이만 있지만
, 실제 내부적으로는 InnoDB에서 인덱스 역순 스캔이 인덱스 정순 스캔에 비해 느릴 수밖에 없는 두가지 이유가 있다.

1. 페이지 잠금이 인덱스 정순 스캔에 적합한 구조이다.
2. 페이지 내에서 인덱스 레코드가 단방향으로만 연결된 구조

InnoDB 페이지 내부에서 레코드들이 정렬 순서대로 저장돼 있는 것처럼 표시돼 있지만 실제로 InnoDB 페이지는 힙처럼 사용되기 때문에 물리적으로 저장이 순서대로 배치되지는 않는다.
그리고 각 데이터 페이지나 인덱스 페이지의 엔트리는 키 값과 데이터를 가지는데 인덱스의 루트 노드 또는 브랜치 노드라면 자식 노드의 주소를 가진다.
프라이머리 키에서 리프노드의 "데이터"는 실제 레코드의 칼럼 값들이며, 세컨더리 인덱스 페이지에서는 프라이머리 키 값을 가진다.

📌쿼리가 인덱스의 앞쪽만 또는 뒤쪽만 집중적으로 읽어서 인덱스의 특정 페이지 잠금이 병목될 것으로 예상된다면
쿼리에서 자주 사용되는 정렬 순서대로 인덱스를 생성하는 것이 잠금 병목현상을 완화하는데 도움이 될 것이다.

8.3.7 B-Tree 인덱스의 가용성과 효율성
쿼리 WHERE, GROUP BY, ORDER BY 절이 어떤 경우에 인덱스를 사용하는지 식별할 수 있어야한다.

비교조건의 종류와 효율성
다중 칼럼 인덱스에서 각 컬럼의 순서와 그 칼럼에 사용되는 조건이 동등 비교(=)인지 아니면 > , <같은 범위 조건인지에 따라 각 인덱스 칼럼의 활용 형태가 달라지며 그효율 또한 달라진다.

케이스 A: INDEX (dept_no, emp_no)
케이스 B: INDEX (emp_no, dept_no)

위 두개의 인덱스가 있다고 가정하고
> SELECT * FROM dept_emp WHERE dept_no ='d002' AND emp_no >=10114; 를 실행했다고 가정해본다.

케이스 A인덱스는 dept_no ='d002' AND emp_no >=10114이 조건에 해당하는 레코드를 찾은 다음 이후에는 dept_no가 d002가 아닐때까지 인덱스를 그냥 쭉 읽기만 하면된다.
케이스 B인덱스는  emp_no >=10114 AND dept_no ='d002'인 레코드를 찾고, 그 이후 모든 레코드에 대해 d002인지 비교하는 과정(필터링과정)을 거쳐야한다.

인덱스 A에서 두조건과 같이 작업 범위를 결정하는 조건을 작업 범위 결정 조건이라하고,
B인덱스의 dept_no ='d002' 조건과 같이 작업 범위를 줄이지 못하고 단순히 필터역할만 하는 조건을 필터링 조건 OR 체크조건이라고 표한됨

작업 범위를 결정하는 조건은 많으면 많을수록 쿼리의 처리 성능을 높이지만 체크조건은 많다고해서 쿼리 성능을 높이지는 못한다. 오히려 쿼리 실행을 느리게 만들 때가 많다.


8.3.7.2 B-Tree 인덱스의 가용성
B-Tree 인덱스의 특징은 왼쪽 값에 기준해서 오른쪽 값이 정렬돼있다는 것이다.
인덱스 키 값의 정렬만 표현하지만 사실은 인덱스 키 값의 이런 정렬 특성은 빠른 검색의 전제 조건이다.
즉, 하나의 컬럼으로 검색해도 값의 왼쪽부분이 없으면 인덱스 레인지 스캔 방식의 검색이 불가능하다. 또한 다중 컬럼 인덱스에서도 왼쪽 컬럼의 값을 모르면 인덱스 레인지 스캔을 사용할 수 없다.

케이스 A : INDEX(first_name)
케이스 B : INDEX(dept_emp, emp_no)

> SELECT * FROM employees WHERE first_name LIKE '%mer';
위와 같은 쿼리는 인덱스 레인지 스캔 방식으로 인덱스를 이용할 수는 없다. 그 이유는 first_name 컬럼에 저장된 값의 왼쪽부터 한 글자씩 비교해 가면서 일치하는 레코드를 찾아야하는데.
조건절에 주어진 상숫값에는 왼쪽 부분이 고정되지 않았기 때문이다.
정렬 우선순위가 낮은 뒷부분의 값만으로는 왼쪽 기준 정렬 기반의 인덱스인 B-Tree에서는 인덱스의 효과를 얻을 수 없다.

> SELECT * FROM dept_emp WHERE emp_no >=10144;
인덱스가 (dept_emp, emp_no) 컬럼 순서대로 생성돼 있다면 인덱스의 선행 컬럼인 dept_no 조건 없이 emp_no 값으로만 검색하면 인덱스를 효율적으로 사용할 수 없다.
케이스 B의 인덱스는 다중 컬럼으로 구성된 인덱스이므로 dept_no 컬럼에 대해 먼저 정렬한 후, 다시 emp_no 칼럼 값으로 정렬돼있기 때문이다.

📌인덱스의 왼쪽 값 기준 규칙은 GROUP BY 절이나 ORDER BY 절에도 똑같이 적용된다.

8.3.7.3 가용성과 효율성 판단

B-Tree 인덱스의 특성상 다음 조건에서는 작업 범위 결정 조건으로 사용할 수 없다. 경우에 따라서는 체크 조건으로 인덱스를 사용할 수는 있다.
-NOT-EQUAL로 비교된 경우 (<> , NOT IN, NOT BETWEEN, IS NOT NULL)
-LIKE'%??' 앞부분이 아닌 뒷부분일치 형태로 문자열 패턴이 비교된 경우
-스토어드 함수나 다른 연산자로 인덱스 칼럼이 변형된 후 비교된 경우
    (WHERE SUBSTRING(column,1,1) ='X' )
-NOT-DETERMINISTIC 속성의 스토어드 함수가 비교조건에 사용된 경우
-데이터 타입이 서로 다른 비교(인덱스 칼럼의 타입을 변환해야 비교가 가능한 경우)
-문자열 데이터 타입의 콜레이션이 다른 경우

다른 일반적인 DBMS에서는 NULL 값이 인덱스에 저장되지 않지만 MySQL 에서는 NULL값도 인덱스에 저장된다. 다음과 같은 조건도 작업 범위 결정 조건으로 인덱스를 사용한다.
WHERE column IS NULL

다중 칼럼으로 만들어진 인덱스는 어떤 조건에서 사용될 수 있고, 어떤 경우에 절대 사용할 수 없는지 살펴보자
INDEX ix_test (column_1, column_2, column_3 ... , column_n )
1.작업 범위 결정 조건으로 인덱스를 사용하지 못하는 경우
    -column_1 칼럼에 대한 조건이 없는경우
    -column_1 칼럼의 비교ㅕ 조건이 위 인덱스 사용 불가 조건 중 하나인 경우

2.작업 범위 결정 조건으로 인덱스를 사용하는 경우 (i는 2보다 크고 n보다 작은 임의의 값을 의미)
    -column_1 ~ column_(i-1) 칼럼까지 동등 비교 형태(= 또는 IN)로 비교
    -column_i 칼럼에 대한 다음 연산자 중 하나로 비교
        -동등 비교 =, IN
        -크다 작다 형태 >, <
        -LIKE 좌측 일치 패턴 (LIKE 'TEST%')

위 2번에서 위 두가지 조건을 모두 만족하는 쿼리는 column_1부터 column_i까지는 작업 범위 결정 조건으로 사용되고, column_(i+1) ~ column_n 까지의 조건은 체크 조건으로 사용된다.
여기서 설명하는 내용은 모두 B-Tree 인덱스의 특징이므로 MySQL 뿐 아니라 대부분의 RDBMS에도 동일하게 적용된다.


8.4 R-Tree 인덱스=============
공간 인덱스는 R-Tree 인덱스 알고리즘을 이용해 2차원의 데이터를 인덱싱하고 검색하는 목적의 인덱스다.
R-Tree는 인덱스는 2차원의 공간 개념 값이라는 것이다.

MySQL의 공간 확장에는 다음과 같이 크게 3가지 기능이 포함돼있다.
-공간 데이터를 저장할 수 있는 데이터타입
-공간 데이터의 검색을 위한 공간 인덱스(R-Tree 알고리즘)
-공간 데이터의 연산함수(거리 또는 포함 관계의 처리)

다음 MySQL은 공간 정보의 저장 및 검색을 위해 여러가지 기하학적 도형 정보를 관리할 수 있는 데이터 타입을 제공한다.
-POINT
-LINE
-POLYGON
-GEOMETRY

GEOMETRY 타입은 나머지 3개의 타입의 슈퍼 타입으로 POINT, LINE, POLYGON 객체를 모두 저장할 수 있다.
공간 정보의 검색을 위한 R-Tree 알고리즘을 이해하려면 MBR이라는 개념을 알고 있어야 한다.

MBR : Minimum Bounding Rectagle의 약자로 해당 도형을 감싸는 최소 크기의 사각형을 의미한다. 이 사각형들의 포함 관계를 B-Tree 형태로 구현한 인덱스가 R-Tree 인덱스다.

R-Tree 인덱스 구조를 이해하려면 MBR을 대충 3개의 레벨로 나눴다고 가정해보겠다.
1.최상위 레벨 MBR
2.차상위 레벨 MBR
3.최하위 레벨 MBR

여기서 최상위 레벨MBR은 R-Tree의 루트노드에 차상위 레벨 MBR은 브랜치 노드에 마지막으로 최하위 레벨 MBR은 리프노드에 저장된다고 볼 수 있다.

8.4.2 R-Tree 인덱스의 용도
MBR정보를 이용해 B-Tree 형태로 인덱스를 구축하므로 Rectangle의 'R'과 B-Tree의 Tree를 썩어서 R-Tree라는 이름이 붙여졌으면, 공간 인덱스라고도 한다.
R-Tree는 각 도형의 포함 관계를 이용해 만들어진 인덱스다. 따라서 ST_Contains() 또는 ST_Within() 등과 같은 포함관계를 비교하는 함수로 검색을 수행하는 경우에만 인덱스를 이용할 수 있다.

>SELECT *
FROM tb_locations
WHERE ST_Contains(사각 상자, px)


>SELECT *
FROM tb_locations
WHERE ST_Within(px, 사각 상자)

ST_Contains()함수는 첫 번 째 파라미터로 포함 경계를 가진 도형을 명시하고, 두번째 파라미터로 포함되는 도형(또는 점 좌표)을 명시해야 한다.
ST_Within()함수는 ST_Contains()의 파라미터 반대이다.


8.5 전문 검색 인덱스

지금까지 살펴본 인덱스 알고리즘은 일반적으로 크지 않은 데이터 또는 이미 키워드화한 작은 값에 대한 인데싱 알고리즘이었다.
대표적으로 B-Tree 인덱스는 실제 컬럼의 값이 1MB이더라도  1MB전체의 값을 인덱스 키로 사용하는 것이 아니라 1000바이트 또는  3072바이트 까지만 잘러서 인덱스 키로 사용한다.

문서의 내용 전체를 인덱스화해서 특정 키워드가 포함된 문서를 검색하는 전문 검색에는 InnoDB나 MyISAM 스토리지 엔진에서 제공하는 일반적인 용도의 B-Tree 인덱스를 사용할 수 없다.

전문 검색 인덱스는 문서의 키워드를 인덱싱하는 기법에 따라 크게 단어의 어근 분석과 n-gram 분석 알고리즘으로 구분할 수 있다.

8.5.1.1 어근 분석 알고리즘 (전문 검색 인덱스)
MySQL 서버의 전문 검색 인덱스는 다음과 같은 두가지 과정을 거친다.
1. 불용어 처리
2. 어근 분석(Stemming)

불용어 처리 : 검색에서 별 가치가 없는 단어를 모두 필터링해서 제거하는 작업을 의미한다.
어근 분석: 검색어로 선정된 단어의 뿌리인 원형을 찾는 작업이다. MySQL서버에서는 오픈소스 형태소 분석 라이버리인 MeCab을 블러그인 형태로 사용할 수 있게 지원한다.


8.5.1.2 n-gram 알고리즘 (전문 검색 인덱스)
n-gram 알고리즘은 단순히 키워드를 검색하내기 위한 인덱싱 알고리즘이라고 할 수 있다.

n-gram이란 본문을 무조건 몇 글자씩 잘라서 인덱싱하는 방법이다.
n-gram알고리즘은 형태소 분석보다는 알고리즘이 단순하고 국가별 언어에 대한 이해와 준비 작업이 필요 없는 반면, 만들어진 인덱스의 크기는 상탕히 큰 편이다.
n-gram에서 n은 인덱싱할 키워드의 최소 글자 수를 의미하는데 , 일반적으로는 2 글자 단위로 키워드를 쪼개서 인덱싱하는 2-gram방식이 많이 사용된다.
주의해야 할 것은 각 글자가 중첩해서 2글자씩 토근으로 구분된다.

MySQL 서버는 2글자씩 잘라서 생성된 토큰들에 대해 불용어를 걸러내는 작업을 수행하는데 이때 불용어와 동일하거나 불용어를 포함하는 경우 걸러서 버린다.
불용어 필터가 되고난 후 남은 토큰들을 단순한 B-Tree인덱스에 저장한다.

8.5.1.3 불용어 변경 및 삭제

1.전문 검색 인덱스의 불용어 처리 무시
불용어 처리를 무시하는 방법은 2가지가 있다.
첫번째. 스토리지 엔진에 관계 없이 MySQL 서버의 모든 전문 검색 인덱스에 대해 불용어를 완전히 제거하는 것이다. 이를 위해서는 my.cnf의 ft_stopword_file 시스템 변수에 빈 문자열을 설정하면 된다.
ft_stopword_file 시스템 변수는 정적 변수이기 때문에 수정사항을 적용하려면 MySQL 서버를 재시작해야 변경사항이 반영된다.

두번째. InnoDB 스토리지 엔진을 사용하는 테이블의 전문 검색 인덱스에 대해서만 불용어 처리를 무시할 수 도 있다.
innodb_ft_enable_stopword 시스템 변수를 OFF로 설정하면 된다. 해당 변수는 동적 변수이므로 바로 반영된다.
> SET GLOBAL innodb_ft_enable_stopword=OFF;

2.사용자 절의 불용어 사용
기본 내장 불용어를 사용하지 않고, 커스텀한 불용어를 사용할 수도 있다.
첫번째. 불용어 목록을 파일로 저장하고 MySQL 서버 설정 파일에서 파일의 경로를 다음과 같이 설정에 등록한다.
ft_stopword_file='/data/my_custom_stopword.txt'

두번째. InnoDB 스토리지 엔진을 사용하는 테이블의 전문 검색 엔진에서만 사용할 수 있는 불용어의 목록을 테이블로 생성하고, innodb_ft_server_stopword_table 시스템 변수에 불용어 테이블을 설정하면된다.
주의할 점은 이때 불용어 목록을 변경한 이후 전문 검색 인덱스가 생성돼야만 변경된 불용어가 적용된다.

8.5.2 전문 검색 인덱스의 가용성
전문 검색 인덱스를 사용하려면 반드시 두가지 조건을 갖춰야한다.
1.쿼리 문장이 전문 검색을 위한 문법(MATCH... AGAINST...)을 사용
2. 테이블이 전문 검색 대상 칼럼에 대해서 전문 인덱스 보유

예시 쿼리 (상세한 문법은 확인필요함)
SELECT * FROM tb WHERE MATCH(doc_body_col) AGAINST ('검색키워드' IN BOOLEAN MODE); // 전문 검색 인덱스 활용 O
SELECT * FROM tb WHERE doc_body_col LIKE '%검색키워드%'; // 전문 검색 인덱스 활용 X


8.6 함수 기반 인덱스
때로는 갈럼의 값을 변형해서 만들어진 값에 대해 인덱스를 구축해야 할 때도 있는데, 이러한 경우 함수 기반의 인덱스를 활용하면 된다.

MYSQL 서버에서 함수 기반 인덱스를 구현하는 방법은 다음과 같이 두가지로 구분할 수 있다.
1. 가상 칼럼을 이용한 인덱스
2. 함수를 이용한 인덱스

8.6.1 가상 칼럼을 이용한 인덱스

가상 컬럼을 추가하고 그 가상 칼럼에 인덱스를 생성할 수 있다.

mysql > ALTER TABLE user
            ADD full_name VARCHAR (30) AS (CONCAT(first_name, ' ' , last_name )) VIRTUAL
            ADD INDEX ix_fullname (full_name);

8.6.2 함수를 이용한 인덱스
함수를 직접 사용하는 인덱스는 테이블의 구조는 변경하지 않고, 계산된 결과값의 검색을 빠르게 만들어준다.
함수 기반 인덱스를 제댈호 활용하려면 반드시 조건절에 함수 기반 인덱스에 명시된 표현식이 그대로 사용돼야 한다.

WHERE 절에 사용된 표현식이 다르다면 MYSQL 옵티마이저는 다른 표현식으로 간주해서 함수 기반 인덱스를 사용하지 못한다.

📌 실제 가상 칼럼을 이용한 방법과 직접 함수를 이용한 함수 기반 인덱스는 내부적으로 동일한 구현 방법을 사용한다. 결국 여기서 알아본 방법은 내부적으로 구현이 동일한 것이라고 볼 수 있으며,
이는 어떤 방법을 사용하더라도 둘의 성능 차이는 방생하지 않는다는 것을 의미한다.

8.7 멀티 밸류 인덱스
전문 검색 인덱스를 제외한 모든 인덱스는 레코드1건이 1개의 인덱스 키 값을 가진다.
즉, 인덱스 키와 데이터 레코드는 1:1의 관계를 가진다.
하지만 멀티 밸류 인덱스는 하나의 데이터 레코드가 여러 개의 키 값을 가질 수 있는 형태의 인덱스다.
최근 RDBMS들이 JSON 데이터 타입을 지원하기 시작하면서 JSON의 배열 타입의 필드에 저장된 원소들에 대한 인덱스 요건이 발생한 것이다.

멀티  밸류 인덱스를 활용하기 위해서는 일반적인 조건 방식을 사용하면 안 되고, 반드시 다음 함수들을 이용해서 검색해야 옵티마이저가 인덱스를 활용한 실행 계획을 수립한다.
- MEMBER OF()
- JSON_CONTAINS()
- JSON_OVERLAPS()

8.8 클러스터링 인덱스
클러스터링 이란 여러 개를 하나로 묶는다는 의미로 주로 사용되는데 MySQl 서버에서 클러스터링은 테이블의 레코드를 비슷한 것들(프라이머리 키를 기준으로) 묶어서 저장하는 형태로 구현되는데,
이는 주로 비슷값들을 동시에 조회하는 경우가 많다는 점에 착안한 것이다.

MySQL에서 클러스터링 인덱스는 InnoDB 스토리지 엔진에서만 지원하며, 나머지 스토리지 엔진에서는 지원되지 않는다.

8.8.1 클러스터링 인덱스
클러스터링 인덱스는 테이블의 프라이머리 키에 대해서만 적용되는 내용이다. 즉 프라이머리 키 값이 비슷한 레코드끼리 묶어서 저장하는 것을 클러스터링 인덱스라고 표현한다.

여기서 중요한 것은 프라이머리 키 값에 의해 레코드의 저장 위치가 결정된다는 것이다.
또한 프라이머리 키 값이 변경된다면 그 레코드의 물리젃인 저장 위치가 바뀌어야 한다는 것을 의미하기도한다.
그래서 클러스터링된 테이블은 프라이머리 키 값 자체에 대한 의존도가 상당히 크기 때문에 신중히 프라이머리 키를 결정해야 한다.

클러스터링 인덱스로 저장되는 테이블은 프라이머리 키 기반의 검색이 매우 빠르고, 대신 레코드의 저장이나 프라이머리 키 변경이 상대적으로 느리다.
그 이유는 B-Tree의 리프노드와 클러스토링 인덱스의 리프노드의 차이를 보면 알 수 있듯이
클러스터링 인덱스의 리프 노드에는 레코드의 모든 칼럼이 같이 저장되므로 검색은 빨리질 수 있지만 그 만큼 저장이나 변경에 대한 비용이 늘어나는 것으로 보인다.

즉, 클러스터링 테이블은 그 자체가 하나의 거대한 인덱스 구조로 관리되는 것을 알 수 있다.

만약 프라이머리 키가 없는 InnoDB 테이블은 어떻게 클러스터링 테이블로 구성될까?
1. 프라이머리 키가 있으면 기본적으로 프라이머리 키를 클러스터링 키로 선택
2. NOT NULL 옵션의 유니크 인덱스 중에서 첫번째 인덱스를 클러스터링 키로 선택
3. 자동으로 유니크한 값을 가지도록 증가되는 칼럼 내부적으로 추가한 후 클러스터링 키로 선택

8.8.2 세컨더리 인덱스에 미치는 영향
클러스터링 키 값이 변경될 때마다 데이터 레코드의 주소가 변경되고 그때마다 해당 테이블의 모든 인덱스에 저장된 주솟값을 변경해야할 것이다.
이런 오버헤드를 제거하기 위해 InnoDB 테이블(클러스터링 테이블)의 모든 세컨더리 인덱스는 해당 레코드가 저장된 주소가 아니라 프라이머리 키 값을 저장하도록 구현돼있다.

예시로 employess 테이블에서 first_name 칼럼으로 검색하는 경우 프라이머리 키로 클러스터링 된 InnoDB와 그렇치 않은 MyISAM에서 차이를 비교해보면
mysql > CREATE TABLE employees (
            emp_no INT NOT NULL,
            first_name VARCHAR(20) NOT NULL,
            PRIMARY KEY (emp_no),
            INDEX ix_firstname (first_name)
            );

MyISAM : ix_firstname 인덱스를 검색해서 레코드의 주소를 확인한 후, 레코드의 주소를 이용해 최종 레코드를 가져옴
InnoDB ix_firstname 인덱스를 검색해 레코드의 프라이머리 키 값을 확인 후 프라이머리 키 인덱스를 검색해서 최종 리코드를 가져옴

InnoDB가 MyISAM 보다 조금 복잡하게 처리된다는 것을 알 수 있다.
하지만 InnoDB 테이블에서 프라이머리 키(클러스터링 인덱스)는 더 큰장점을 제공하기 때문에 성능 저하에 너무 걱정하지 않아도된다.



8.8.3 클러스터링 인덱스의 장점과 단점
장점
-프라이머리 키로 검색할 때 처리 설능이 매우 빠름(특히, 프라이머리 키를 범위 검색하는 경우 매우 빠름)
- 테이블의 모든 세컨더리 인덱스가 프라이머리 키를 가지고 있기 때문에 인덱스만으로 처리될 수 있는 경우가 많음

단점
- 테이블의 모든 세컨더리 인덱스가 클러스터링 키를 갖기 때문에  클러스터링 키 값의 크기가 클 경우 전체적으로 인덱스의 크기가 커짐
- 세컨더리 인덱스를 통해 검색할 때 프라이머리 키로 다시 한번 검색해야 하므로 처리 성능이 느림
- INSERT 할때 프라이머리 키에 의해 레코드의 저장 위치가 결정되기 때문에 처리 성능이 느림
- 프라이머리 키를 변결할 때 레코드를 DELETE하고 INSERT하는 작업이 필요하기 때문에 처리 성능이 느림

8.8.4 클러스터링 테이블 사용 시 주의사항
InnoDB 테이블(클러스터링 테이블)에서는 조금 더 주의할 사항이 있다.

8.8.4.1클러스터링 인덱스 키의 크기
클러스터링 테이블의 경우 모든 세컨더리 인덱스가 프라이머리 키 값을 포함한다. 그래서 프라이머리 키의 크기가 커지면 세컨더리 인덱스도 자동으로 크기가 커진다. 하지만 일반적으로 테이블에 세컨더리 인덱스가
4~5개 정도 생성된다는 것을 고려하면 세컨더리 인덱스 크기는 급격히 증가한다.
인덱스가 커질수록 같은 성능을 내기 위해 그만큼의 메모리가 더 필요해지므로 InnoDB 테이블의 프라이머리 키는 신중하게 선택해야 한다.

8.8.4.2 프라이머리 키는 AUTO-INCREMENT 보다는 업무적인 칼럼으로 생성(가능한 경우)
InnoDB의 프라이머리 키는 클러스터링 키로 사용되며, 이 값에 의해 레코드의 위치가 결정된다. 즉, 프라이머리 키로 검색하는 경우(특히 범위로 많은 레코드를 검색하는 경우)
클러스터링되지 않은 테이블에 비해 매우 빠르게 처리될 수 있음을 의미한다.
프라이머리 키는 그의미많큼이나 중요한 역할을 하기 때문에 대부분 검색에서 상당히 빈번하게 사용되는 것이 일반적이다. 그러므로 설령 그 칼럼의 크기가 크더라도 업무적으로 해당 레코드를 대표할 수 있다면
그 칼럼을 프라이머리 키로 설정하는 것이 좋다.

8.8.4.3 프라이머리 키는 반드시 명시할 것
가끔 프라이머리 키가 없는 테이블을 자주 보게 되는데
가능하면  AUTO-INCREMENT 칼럼을 이용해서라도 프라이머리 키는 생성하는 것을 권장한다.
InnoDB 테이블에서 프라이머리 키를 정의하지 않으면 스토리지 엔진 내부적으로 일련번호 칼럼을 추가한다. 하지만 이렇게 자동으로 추가된 칼럼은 사용자에게 보이지 않기 때문에 사용자가 전혀 접근할 수가 없다.

또한 Row 기반의 복제나 InnoDB Cluster에서는 모든 테이블이 프라이머리 키를 가져야만 하는 정상적인 복제 성능을 보장하기도 하므로 프라이머리 키는 꼭생성하자.

8.8.4.4 AUTO-INCREMENT 칼럼을 인조 식별자로 사용할 경우
여러개의 칼럼이 복합으로 프라이머리 키가 만들어지는 경우 프라이머리 키의 크기가 길어질 때가 있다. 하지만 프라이머리 키의 크기가 길어도 세컨더리 인덱스가 필요하지 않다면 그대로 프라이머리 키를 사용하는 것이 좋다.
하지만 둘다 필요하다면  AUTO-INCREMENT 칼럼을 추가하고, 이를 프라이머리 키로 설정하면 된다.
이렇게 프라이머리 키를 대체하기 위해 인위적으로 추가된 프라이머리 키를 인조 식별자(Surrogate key)라고 한다.
그리고 로그 테이블과 같이 조회보다는 INSERT 위주의 테이블들은 AUTO-INCREMENT를 이용한 인조 식별자를 프라이머리 키로 설정하는 것이 성능향상에 도움이 된다.











