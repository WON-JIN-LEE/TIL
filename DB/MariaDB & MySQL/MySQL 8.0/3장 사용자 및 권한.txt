참고: Real MySQL 8.0 1편
기간: 2024-01-09 ~

3장 DB 사용자 및 권한=================================================

#사용자 계정 생성
CREATE USER 'ID입력'@'%'
	IDENTIFIED WITH 'mysql_native_password' BY '패스워드입력'; // WITH 뒤에 인증방식 지정, WITH 옵션 없으면 시스템 글로벌 설정값에 따라감

인증방식 : Caching SHA-2(256비트) Pluggable Authentication 
- 이 인증방식을 사용하려면 SSL/TLS 또는 RSA 키페어를 반드시 사용해야 하는데 이를 위해 클라이언트에서 접속할 때 SSL 옵션을 활성화해야한다.
	
3.3 비밀번호 관리
validate_password 컴포넌트가 설치되면 다음과 같이 컴포넌트에서 제공하는 시스템 변수를 확인할 수 있다.
> SHOW GLOBAL VARIABLES LIKE 'validate_password%'

비밀번호 정책은 크게 다음 3가지 중에서 선택할 수 있으며, 기본값은 MEDIUM으로 자동 설정된다.
-LOW: 비밀번호 길이만 검증
-MEDIUM: 비밀번호의 길이를 검증하며, 숫자와 대소문자, 그리고 특수문자의 배합을 검증
-STRING:MEDIUM 레ㅂㄹ의 검증을 모두 수행하며, 금칙어가 포함됐는지 여부까지 검증

3.3.2 이중 비밀번호
일반적으로 많은 응용 프로그램 서버들이 공용으로 데이터베이스 서버를 사용하기 때문에 데이터베이스 서버의 계정 정보는 응용 프로그램 서버로부터 공용으로 사용되는 경우가 많다.
이러한 구현 특성으로 인해 데이터베이스 서버의 계정 정보는 쉽게 변경하기 어려운데, 그중에서도 데이터 베이스 계정의 비밀번호는 서비스가 실행 중인 상태에서 변경이 불가능 했다.
그래서 서비스에서 데이터베이스 계정의 비밀번호는 처음 설정한 상태로 몇 년동안 사용되는 경우가 많다.
데이터베이스 계정의 비밀번호는 보안을 위해 주기적으로 변경해야하지만 서비스를 모두 멈추지 않고서는 변경하는 것은 불가능한 일이었다.

이 같은 문제점을 해결하기 위해 MySQL8.0버전부터는 계정의 비밀번호로 2개 값을 동시에 사용할 수 있는 기능을 추가했다.
여기서 말하는 이중 비밀번호는 2개의 비밀번호 중 하나만 일치하면 로그인이 통과된다는 것을 의미한다.

MySQl 서버의 이중 비밀번호 기능은 하나의 계정에 대해 2개의 비밀번호를 동시에 설정할 수 있는데, 2개의 비밀번호는 프라이머리와 세컨더리로 구분된다.

이중 비밀번호 설정 순서
>ALTER USER 'root'@'localhost IDENTIFIED BY 'old_pw';
>ALTER USER 'root'@'localhost IDENTIFIED BY 'new_pw' RETAIN CURRENT PASSWORD;

첫번째 비밀번호는 old_pw로 변경되고 세컨더리 비밀번호는 빈상태가 된다.
두면째 명령이 실행되면 이전 비밀번호 였던 old_pw는 세컨더리  비밀번호로 설정되고, 새롭게 설정한 new_pw는 프라이머리 비밀번호가 된다.

그후에 MySQL 서버에 접속하는 모든 응용 프로그램의 재시작이 완료되면 이제 다음 명령으로 세컨더리 비밀번호는 삭제한다.
세컨더리 비밀번호는 꼭 삭제해야하는 것은 아니지만 계정의 보안을 위해 삭제하는 것이 좋다.

>ALTER USER 'root'@'localhost DISCARD OLD PASSWORD;

3.4 권한

정적 권한은 MySQL 서버의 소스코드에 고정적으로 명시돼 있는 권한을 의미한다.
동적 권한은 MySQL 서버가 시작되면서 동적으로 생성하는 권한을 의미한다.(컴포넌트나 플러그인이 설치되면 그때 등록되는 권한 등)

사용자에게 권한을 부여할 떄는 GRANT 명령을 사용한다.

글로벌 권한
mysql> GRANT SUPER ON *.* TO 'user'@'localhost';
글로벌 권한은 특정 DB나 테이블에 부여될 수 없기 때문에 글로벌 권한을 부여할 때 GRANT 명령의 ON절에는 항상 *.*를 사용하게 된다.
*.*은 모든 DB의 모든 오브젝트를 포함해서 MySQL 서버 전체를 의미한다. CREATE USER나 CREATE ROLE 과 같은 글로벌 권한은 DB 단위나 오브젝트 단위로 부여할 수 있는 권한이 아니므로 항상 *.*로만 댄상을 사용할 수 있다.

DB 권한
mysql> GRANT EVENT ON *.* TO 'user'@'localhost';
mysql> GRANT EVENT ON employees.* TO 'user'@'localhost';
DB권한은 특정 DB에 대해서만 권한을 부여하거나 서버에 존재하는 모든 DB에 대해 권한을 부여할 수 있기 때문에 위의 예제와 같이 ON절에 *.*이나 employees.* 모두 사용할 수 있다.
DB권한의 경우 테이블까지는 명시할 수 없다.

테이블 권한
 mysql> GRANT SELECT, INSERT, UPDATE, DELETE ON *.* TO 'user'@'localhost';
 mysql> GRANT SELECT, INSERT, UPDATE, DELETE ON emp.* TO 'user'@'localhost';
 mysql> GRANT SELECT, INSERT, UPDATE, DELETE ON emp.department TO 'user'@'localhost';

테이블 권한은 모든 DB에 대해 권한을 부여하는 것이 가능하며
특정 DB 오브젝트에 대해서만 권한을 부여하는 것도 가능하다.
그리고 특정 DB의 특정 테이블에 대해서만 권한을 부여하는 것도 가능하다.

각 계정이나 권한에 부여된 권한이나 역할을 확인하기 위해서는 SHOW GRANTS 명령을 사용할 수 있다.
표 형태로 보고자 한다면  mysql 권한 관련 테이블을 참조하면된다.

정적권한
- mysql.user : 계정정보 & 역할에 부여된 글로벌 권한
- mysql.db : DB 단위로 부여된 권한
- mysql.tables_priv : 테이블 단위
- mysql.columns_priv : 컬럼 단위
- mysql.procs_priv : 스토어드 프로그램 단위로 부여된 권한

동적권한
- mysql.global_grants : 계정이나 역할에 부여되는 동적 글로벌 권한

