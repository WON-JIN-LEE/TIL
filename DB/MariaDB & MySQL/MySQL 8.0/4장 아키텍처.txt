
4장 MySQL 아키텍처=================================================
MySQL 서버는 사람의 머리 역할을 담당하는 MySQL 엔진과 손발 역할을 담당하는 스토리지 엔진으로 구분할 수 있다.

4.1 MySQL 엔진 아키텍처
MySQL은 일반 사용 RDBMS와 같이 대부분의 프로그래밍 언어로부터 접근 방법을 모두 지원한다.
C API 부터 JDBC, ODBC, .NET의 표준 드라이버를 제공하며, 이러한 드라이버를 이용해 C/C++, PHP, JAVA, Python, Ruby 까지 모든 언어로 MySQL 서버에서 쿼리를 사용할 수 있게 지원한다.


MySQL 서버는 크게 MySQL 엔진과 스토리지 엔진으로 구분할 수 있다.

MySQL의 쿼리 파서나 옵티마이저 등과 같은 기능을 스토리지 엔진과 구분하고자, MySQL 엔진과 스토리지 엔진으로 구분했다. 그리고 이둘은 모두 합쳐서 그냥 MySQL 또는 MySQL 서버라고 표하겠다.

4.1.1 MySQL 엔진
MySQL엔진은 클라이언트로부터의 접속 및 쿼리 요청을 처리하는 커넥션 핸들러와 SQL 파서 및 전처리기, 쿼리의 최적화된 실행을 위한 옵티마이저가 중심을 이룬다.
또한 MySQL은 표준 SQL(ANSI SQL)문법을 지원하기 때문에 표준 문법에 따라 작성된 쿼리는 타 DBMS와 호환되어 실행될 수 있다.

4.1.1.2 스토리지 엔진
MySQL 엔진은 요청된 SQL 문장을 분석하거나 최적화하는 등 DBMS의 두뇌에 해당하는 처리를 수행하고, 실제 데이터를 디스크 스토리지에 저장하거나 디스크 스토리지로부터 데이터를 읽어오는 부분은 스토리지 엔진이 전담한다.
MySQL 서버에서 MySQL 엔진은 하나지만 스토리지 엔진은 여러 개를 동시에 사용할 수 있다.
테이블이 사용할 스토리지 엔진을 지정하면 이후 해당 테이블의 모든 읽기 작업이나 변경 작업은 젖의된 스토리지 엔진이 처리한다.

INSERT, DELETE, SELECT, UPDATE 등의 작업이 발생하면 InnoDB 스토리지 엔진이 그러한 처리를 담당한다. 그리고 각 스토리지 엔진은 성능 향상을 위해 키 캐시나 InnoDB 버퍼풀 과 같은 기능을 내장하고 있다.

4.1.1.3 핸들러 API
MySQL엔진의 쿼리 실행기에서 데이터를 쓰거나 읽어야 할 때는 각 스토리지 엔진에 쓰기 또는 읽기를 요청하는데, 이러한 요청을 핸들러 요청이라하고, 여기서 사용되는 API를 핸들러API라고 한다.
InnoDB 스토리지 엔진또한 이 핸들러 API를 이용해 MySQL 엔진과 데이터를 주고받는다.
이 핸들러 API를 통해 얼마나 많은 데이터(레코드) 작업이 있었는지
SHOW GLOBAL STATUS LIKE 'Handler%'; 명령으로 확인할 수 있다.


4.1.2 MySQL 스레딩 구조
MySQL 서버는 프로세스 기반이 아니라 스레드 기반으로 작동하며, 크게 포그라운드 스레드와 백그라운드 스레드로 구분할 수 있다.
MySQL 서버에서 실행중인 스레드의 목록은 다음과 같이 performance_schema 데이터베이스의 threads 테이블을 통해 확인할 수 있다.

mysql > SELECT * FROM performance_schema,threads ORDER BY type, thread_id;

조회했을 때 동일한 이름의 스레드가 2개 이상씩 보이는 것은 MySQL 서버의 설정 내용에 의해 여러 스레드가 동일 작업을 병렬로 처리하는 경우다.

4.1.2.1 포그라운드 스레드(클라이언트 스레드)
포스라운드 스레드는 최소한 MySQL 서버에 접속된 클라이언트의 수만큼 존재하며, 주로 각 클라이언트 사용자가 요청하는 쿼리 문장을 처리한다.
클라이언트 사용자가 작업을 마치고 커넥션을 종료하면 해당 커넥션을 담당하던 스레드는 다시 스레드 캐시로 되돌아간다.
이때 이미 스레드 캐시에 일정 개수 이상의 대기 중인 스레드가 있으면 스레드 캐시에 넣지 않고 스레드를 종료시켜 일정 개수의 스레드만 스레드 캐시에 존재하게 한다.
최대 스레드 개수는 thread_cache_size 시스템 변수로 설정한다.

포그라운드 스레드는 데이터를 MySQL의 데이터 버퍼나 캐시로부터 가져오며, 버퍼나 캐시에 없는 경우에는 직접 디스크의 데이터나 인덱스 파일로부터 데이터를 읽어와서 작업을 처리한다.
MyISAM 테이블은 디스크 쓰기 작업까지 포그라운드 스레드가 처리하지만, InnoDB 테이블은 데이터 버퍼나 캐시까지만 포그라운드 스레드가 처리하고, 나머지 버퍼로부터 디스크까지 기록하는 작없은 백그라운드 스레드가 처리한다.

MySQL에서 사용자 스레드와 포그라운드 스레드는 똑같은 의미로 사용된다.

4.1.2.2 백그라운드 스레드
MyISAM의 경우에는 별로 해당 사항이 없는 부분이지만 InnoDB는 다음과 같이 여러가지 작업이 백그라운드로 처리된다.
- 인서트 버퍼를 병합하는 스레드
- 로그를 디스크로 기록하는 스레드
- InnoDB 버퍼 풀의 데이터를 디스크에 기록하는 스레드
- 데이터를 버퍼로 읽어오는 스레드
- 잠금이나 데드락을 모니터링하는 스레드

모두 중요한 역할을 하지만 그중에서도 가장 중요한 것은 로그 스레드와 버퍼의 데이터를 디스크로 내려쓰는 작업을 처리하는 쓰기 쓰레드일 것이다.
MySQL 5.5버전부터 데이터 쓰기 쓰레드와 데이터 읽기 스레드의 개수를 2개 이상 지정할 수 있게 됐으며, innodb_write_io_threads와 innodb_read_io_threads 시스템 변수로 스레드의 개수를 설정한다.
InnoDB에서도 데이터를 읽는 작업은 주로 클라이언트 스레드에서 처리되기 떄문에 읽기 스레드는 많이 설정할 필요가 없지만 쓰기 스레드는 아주 많은 작업을 백그라운드로 처리하기 때문에 일반적인 내장 디스크를 사용할 때는 2 ~ 4정도
DAS나 SAN과 같은 스토리지를 사용할 때는 디스크를 최적으로 사용할 수 있을 만큼 충분히 설정하는 것이 좋다.

사용자의 요청을 처리하는 도중 데이터 쓰기 작업은 지연(버퍼링)되어 처리될 수 있지만 데이터의 읽기 작없은 절대 지연될 수 없다.
InnoDB에서는 INSERT, UPDATE, DELETE 쿼리로 데이터가 변경되는 경우 데이터가 디스크의 데이터 파일을 완전히 저장될 때까지 기다리지 않아도 된다.

4.1.3 메모리 할당 및 사용구조
MySQL에서 사용되는 메모리 공간은 크게 글로벌 메모리 영역과 로컬 메모리 영역으로 구분할 수 있다.
글로벌 메모리 영역의 모든 메모리 공간은 MySQL 서버가 시작되면서 운영체제로부터 할당된다.

4.1.3.1 글로벌 메모리 영역
일반적으로 클라이언트 스레드의 수와 무관하게 하나의 메모리 공간만 할당된다. 단, 필요에 따라 2개 이상의 메모리공간을 할당받을 수도 있지만 클라이언트의 스레드 수와는 무관하며
생성된 글로벌 영역이 N개라 하더라도 모든 스레드에 의해 공유된다.

대표적인 글로벌 메모리 영역은 다음과 같다.
-테이블 캐시
-InnoDB 버퍼 풀
-InnoDB 어댑티브 해시 인덱스
-InnoDB 리두 로그 버퍼

4.1.3.2 로컬 메모리 영역
MySQL 서버상에 존재하는 클라이언트 스레드가 쿼리를 처리하는데 사용하는 메모리 영역이다.
클라이언트가 MySQL 서버에 접속하면 MySQL 서버에서는 클라이언트 커넥션으로부터의 요청을 처리하기 위해 스레드를 하나씩 할당하게 되는데, 클라이언트 스레드가 사용하는 메모리공간이라고 해서
클라이언트 메모리 영역이라고도 한다.

클라이언트와 MySQL 서버와의 커넥션 세션이라고 하기 때문에 로컬 메모리 영역을 세션 메모리 영역이라고도 표현한다.

1.로컬 메모리는 각 클라이언트 스레드 별로 독립적으로 할당되며 절대 공유되어 사용되지 않는다는 특징이 있다.
2.또다른 중요한 특징은 각 쿼리의 용도별로 필요할 때만 공간이 할당되고 필요하지 않은 경우에는 MySQL이 메모리 공간을 할당조차도 하지 않을 수도 있다는 점이다.

로컬 메모리 공간은 커넥션이 열려 있는 동안 계속 할당된 상태로 남아있는 공간도 있고(커넥션 버퍼나 결과 버퍼) 그렇지 않고 쿼리를 실행하는 순간에만 할당했다가 다시 해제하는 공간(소트버퍼나 조인버퍼)도 있다.

대표적인 로컬 메모리 영역
-정렬버퍼
-조인버퍼
-바이너리 로그 캐시
-네트워크 버퍼

4.1.4 플러그인 스토리지 엔진 모델
MySQ에서 쿼리가 실행되는 과정을 크게  4가로 나뉘었을때
SQL파서, SQL 옵티마이저, SQL 실행기는 MySQL 엔진에서 처리되고, 마지막 데이터 읽기/쓰기 작업만 스토리지 엔진에 의해 처리된다.

읽기/쓰기 작업은 대부분 1건의 레코드 단위로 처리된다. 그리고 MySQL을 사용하다 보면 핸들러라는 단어를 자주 접하게 되는데
MySQL 서버에서 MySQL 엔진은 사람 역할을 하고 각 스토리지 엔진은 자동차 역할을 하는데 MySQL엔진이 스토리지 엔진을 조정하기 위해 핸들러라는 것을 사용하게된다.
MySQL 엔진이 각 스토리지 엔진에게 데이터를 읽어오거나 저장하도록 명령하려면 반드시 핸들러를 통해야 한다는 점이다.

실질적인 GROUP BY나 ORDER BY 등 복잡한 처리는 스토리지 엔진 영역이 아닌 MySQL 엔진의 '쿼리 실행기'에서 처리된다.

여기서 중요한 내용은 "하나의 쿼리 작업은 여러 하위 작업으로 나뉘는데, 각 하위작업이 MySQL 엔진 영역에서 처리되는지 아니면 스토리지 엔진 영역에서 처리되는지 구분할 줄 알아야 한다는 점이다."

# MySQL 서버에서 지원되는 스토리지엔진 조회
mysql> SHOW ENGINES;

# MySQL 서버에서 지원되는 플러그인 조회
mysql> SHOW PLUGINS;

4.1.5 컴포넌트

MySQL 8.0부터는 기존의 플러그인 아키텍처를 대체하기 위해 컴포넌트 아키텍처가 지원된다.

기존 플러그인 단점
-플러그인은 오직 MySQL 섭와 인터페이스할 수 있고, 플러그인끼리는 통신할 수 없다.
-플러그인은 MySQL 서버의 변수나 함수를 직접 호출하기 때문에 안전하지 않음
-플러그인은 상호 의존 관계를 설정할 수 없어서 초기화가 어려움

컴포넌트는 이러한 단점들을 보완해서 구현되었다.


4.1.6 쿼리 실행 구조✨

순서
사용자 => SQL => 쿼리 파서 => 전처리기 => 옵티마이저 => 쿼리 실행기(실행 엔진) => 스토리지 엔진 => 쿼리 실행기 => 사용자

4.1.6.1 쿼리파서
쿼리파서는 사용자 요청으로 들어온 쿼리문장을 토큰(MySQL이 인식할 수 있는 최소 단위의 어휘나 기호)으로 분리해 트리 형태의 구조로 만들어 내는 작업을 의미한다.
쿼리 문장의 기본 문법 오류는 이 과정에서 발견되고 사용자에게 오류 메세지를 전달하게 된다.

4.1.6.2 전처리기
파서 과정에서 만들어진 파서 트리를 기반으로 쿼리 문장에 구조적인 문저점이 있는지 확인한다. 각 토큰을 테이블 이름이나 칼럼 이름, 또는 내장 함수와 같은 개체를 매핑해 해당 객체의 존재 여부와 객체의 접근 권한 등을 확인하는 과정을 수행한다.
실제 존재하지 않거나 권한상 사용할 수 없는 개체의 토큰은 이단계에서 걸러진다.

4.1.6.3 옵티마이저
옵티마이저란 사용자의 요청으로 들어온 쿼리 문장을 저렴한 비용으로 가장 빠르게 처리할지를 결정하는 역할을 담당한다.
DBMS의 두뇌에 해당한다고 볼 수 있다.

4.1.6.4 쿼리 실행기(실행 엔진)
옵티마이저가 두뇌라면 실행 엔진과 헨들러는 손과 발에 비유할 수 있다.

옵티마이저가 GROUP BY를 처리하기 위해 임시 테이블을 사용하기로 결정했다고 해보자
1.실행 엔진이 핸들러에게 임시 테이블을 만들어라고 요청한다.
2.다시 실행 엔진은 WHERE 절에 일치하는 레코드를 읽어오라고 요청한다.
3.읽어온 레코드들은 1번에서 준비한 임시 테이블로 저장하라고 다시 핸들러에게 요청한다.
4.데이터가 준비된 임시 테이블에서 필요한 방식으로 데이터를 읽어오라고 핸들러에게 다시 요청
4.최종적으로 실행 엔진은 결과를 사용자나 다른 모듈로 넘김

즉, 실행 엔진은 만들어진 계획대로 각 핸들러에게 요청해서 받은 결과를 또 다른 핸들러 요청의 입력으로 연결하는 역할을 수행한다.

4.1.6.5 핸들러(스토리지 엔진)
핸들러는 MySQL 서버의 가장 밑단에서 MySQL 실행 엔진의 요청에 따라 데이터를 디스크로 저장하고 디스크로부터 읽어오는 역할을 담당한다.
핸들러는 결국 스토리지 엔진을 의미하며 MyISAM 테이블을 조작하면 핸들러가 MyISAM 스토리지 엔진이 되고, InnoDB 테이블을 조작하는 경우에는 핸들러 InnoDB 스토리지 엔진이 된다.

4.1.8 쿼리 캐시
MySQL 서버에서 쿼리 캐시는 빠른 응답을 필요로 하는 웹 기반의 응용 프로그램에서 매우 중요한 역할을 담당했다.
쿼리 캐시는 SQL의 실행 결과를 메모리에 캐시하고, 동일한 SQL 쿼리가 실행되면 테이블을 읽지 않고 즉시 결과를 반환하기 때문에 매우 빠른 성능을 보였다.
하지만 쿼리 캐시는 테이블의 데이터가 변경되면 캐시에 저장된 결과중에서 변경된 테이블과 관련된 것들은 모두 삭제 해야했다. 이는 심각한 동시처리 성능 저하와 많은 버그의 원인이 되기도 했다.
결국 8.0으로 올라오면서 쿼리 캐시는 완전히 MySQL 서버의 기능에서 제거되었다.

4.1.9 스레드 풀
스레드 풀은 내부적으로 사용자의 요청을 처리하는 스레드 개수를 줄여서 동시 처리되는 요청이 많다하더라도  MySQL 서버의 CPU가 제한된 개수의 스레드 처리에만 집중할 수 있게 해서 서버의 자원 소모를 줄이는 것이 목적이다.
스레드 풀은 실행 중인 스레드들을 CPU가 최대한 잘 처리해낼 수 있는 수준으로 줄여서 빨리 처리하게 하는 기능이기 때문에 스케줄링 과정에서 CPU 시간을 제대로 확보하지 못하는 경우에는 쿼리 처리가 더 느려지는 사례도 발생할 수 있다는 점에 주의하자
제한된 수의 스레드만으로 CPU가 처리하도록 적절히 유도한다면 CPU의 프로세서 친화도도 높이고 운영체제 입장에서는 불필요한 컨텍스트 스위치를 줄여서 오버헤드를 낮출 수 있다.

스레드 그룹의 모든 스레드가 일을 처리하고 있다면 스레드 풀은 해당 스레드 그룹에 새로운 작업 스레드(워커 스레드)를 추가할지, 아니면 기존 작업 스레드가 처리를 완료할 때까지 기다릴지 여부를 판단해야한다.
스레드 풀의 타이머 스레드는 주기적으로 스레드 그룹의 상태를 체크해서 thread_pool_stall_limit 시스템 변수에 정의된 밀리초만큼 작업 스레드가 지금 처리 중인 잓업을 끝내지 못하면 새로운 스레드를 생성해서 스레드 그룹에 추가한다.
이때 전체 스레드 풀에 있는 스레드 개수는 thread_pool_max_threads 시스템 변수에 설정된 개수를 넘어설 수 없다.

4.1.10 트랜잭션 지원 메타데이터
데이터베이스 서버에서 테이블의 구조 정보와 스토어드 프로그램 등의 정보를 데이터 딕셔너리 또는 메타데이터라고 하는데, MySQL 서버는 5.7버전까지 테이블의 구조를  FRM 파일에 저장하고 일부 스토어드 프로그램 또한 파일 기반으로 관리했다.
하지만 이러한 파일 기반 메타데이터는 생성 및 변경 작업이 트랜잭션을 지원하지 않기 때문에 테이블의 생성 또는 변경 도중에 MySQL 서버가 비정상적으로 종료되면 일관되지 않은 상태로 남는 문제가 있었다. 많은 사용자들이 이 같은 현상을 가리켜"데이터베이스나 테이블이 깨졌다"라고 표현한다.

MySQL 8.0버전부터는 이런한 문제점을 해결하기 위해 테이블의 구조 정보나 스토어드 프로그램의 코드 관련 정보를 모두 InnoDB의 테이블에 저장하도록 개선됐다.
시스템 테이블과 데이터 딕셔너리 정보를 모두 모아서 mysql DB에 저장하고 있다. mysql DB는 통째로 mysql.ibd라는 이름의 테이블스페이스에 저장된다. 그래서 MySQL 서버의 데이터 디렉터리에 존재하는 mysql.ibd라는 파일은 다른 *.ibd 파일과 함께 특별히 주의해야 한다.
MySQL 8.0버전부터 데이터 딕셔너리와 시스템 테이블이 모두 트랜잭션 기반의 InnoDB 스토리지 엔진에 저장되도록 개선되면서 이제 스키마 변경 작업 중간에 MySQL 서버가 비정상적으로 종료된다고 하더라도 스키마 변경이 완전한 성공 또는 완전한 실패로 정리된다.
기존의 파일 기반 메타데이터를 사용할 때와 같이 작업 진행 중인 상태로 남으면서 문제를 유발하지 않게 개선된 것이다.
MySQL 서버는 InnoDB 스토리지 엔진 이외의 스토리지 엔진을 사용하는 테이블들은 위해 SDI(Serialized Dictionary Information) 파일을 사용한다.

ibd2sdi 유틸리티를 이용하면 InnoDB 테이블스페이스에서 스키마 정보를 추출할 수 있다.
다음은 mysql DB에 포함된 테이블의 스키마를 JSON 파일로 덤프하는 커맨드다.
linux > ibd2sdi mysql_data_dir/mysql.ibd > mysql_schema.json
linux > cat mysql_schema.json

4.2 InnoDB 스토리지 엔진 아키텍처
InnoDB 스토리지는 MySQL에서 사용할 수 있는 스토리지 엔진 중 거의 유일하게 레코드 기반의 잠금을 제공하며, 그 때문에 높은 동시성 처리가 가능하고 안정적이며 성능이 뛰어나다.

4.2.1 프라이머리 키에 의한 클러스터링
InnoDB의 모든 테이블은 기본적으로 프라이머리 키를 기준으로 클러스터링 되어 저장된다.
즉 프라이머리 키 값의 순서대로 디스크에 저장된다는 뜻이며, 모든 세컨더리 인덱스는 레코드의 주소 대신 프라이머리 키의 값을 논리적인 주소로 사용한다.
프라이머리 키가 클러스터링 인덱스이기 때문에 프라이머리 키를 이용한 레인지 스캔은 상당히 빨리 처리될 수 있다.

결과적으로 쿼리의 실행 계획에서 픅라이머리 키는 기본적으로 다른 보조 인덱스에 비해 비중이 높에 설정된다.

오라클 DBMS의 IOT(Index organized table)와 동일한 구조가 InnoDB에서는 일반적인 테이븛의 구조가 되는 것이다.

InnoDB엔진과 달리 MyISAM 스토리지 엔진에서는 클러스터링 키를 지원하지 않는다. 그래서 MyISAM 테이블에서는 프라이머리 키와 세컨더리 인덱스는 구조적으로 아무런차이가 없다.

4.2.2 왜래 키 지원
외래 키에 대한 지원은 InnoDB 스토리지 엔진 레벨에서 지원하는 기능으로 MyISAM이나 MEMORY 테이블에서는 사용할 수 없다.
InnoDB에서 외래 키는 부모 테이블과 자식 테이블 모두 해당 칼럼에 인덱스 생성이 필요하고, 변경 시에는 반드시 부모 테이블이나 자식 테이블에 데이터가 있는지 체크하는 작업이 필요하므로
잠금이 여러 테이블로 전파되고, 그로 인해 데드락이 발생할 때가 많으므로 개발할때도 외래 키의 존재에 주의하는 것이 좋다.

4.2.3 MVCC (Multi Version Concurrency Control)
MVCC의 가장 큰 목적은 잠금을 사용하지 않는 일관된 읽기를 제공하는 데 있다.
InnoDB는 언두 로그를 이용해 이 기능을 구현한다. 여기서 멀티 버전이라 함은 하나의 레코드에 대해 여러 개의 버전이 동시에 관리된다는 의미다.


커밋 실행 여부와 관계없이 InnoDB의 버퍼 풀은 새로운 값인'경기'로 업데이트된다.
그리고 디스크의 데이터 파일에는 체크포인트나 InnoDB의 Write 스레드에 의해 새로운 값으로 업데이트돼 있을 수도 있고 아닐 수도 있다.
(InnoDB가 ACID를 보장하기 때문에 일반적으로는 InnoDB의 버퍼 풀과 데이터 파일은 통일한 생태라고 가정해도 무방하다)
아직 COMMIT이나 ROLLBACK이 되지 않은 상태에서 다른 사용자가 다음 같은 쿼리로 작업중인 레코드를 조회하면 어디에 있는 데이터를 조회할까?

MySQL 서버의 시스템 변수(transaction_isolation)에 설정된 격리 수준에 따라 다르다.
격리 수준이 READ_UNCOMMITTED인 경우에는 InnoDB 버퍼풀이 현재 가지고 있는 변경된 데이터를 읽어서 반환한다. 즉, 데이터가 커밋됐든 아니든 변경된 상태의 데이터를 반환한다.

그렇지 않고 READ_COMMITTED나 그 이상의 격리 수준인 경우에는 버퍼 풀이나 데이터 파일에 있는 내용대신 변경되기 이전의 내용을 보관하고 있는 언두 영역의 데이터를 반환한다.
이러한 과정을 DBMS에서는 MVCC라고 표현한다.
즉, 하나의 레코드에 대해 2개의 버전이 유지되고, 필요에 따라 어느 데이터가 보여지는 여러가지 상황에 따라 달라지는 구조다.

지금까지 UPDATE 쿼리가 실행되면 InnoDB 버퍼 풀은 즉시 새로운 데이터로 변경되고 기존 데이터는 언두영역으로 복사되는 과정까지 실펴봤는데, 이상태에서 COMMIT 명령을 실행하면 InnoDB는 더 이상의 변경 작업 없이 지금의 상태를 영구적인 데이터로 만들어 버린다.
하지만 롤백을 실행하면 InnoDB는 언두 영역에 있는 백업된 데이터를 InnoDB 버퍼 풀로 다시 복구되고, 언두 영역의 내용을 삭제해버린다.

커밋이 된다고 언두 영역의 백업 데이터가 항상 바로 삭제되는 것은 아니다. 이 언두 영역을 필요로하는 트랜잭션이 더는 없을 때 비로소 삭제된다.

4.2.4 잠금 없는 일관된 읽기(Non-Locking Consistent Read)
InnoDB 스토리지 엔진은 MVCC 기술을 이용해 잠금을 걸지 않고 읽기 작업을 수행한다. 잠금을 걸지 않기 때문에 InnoDB에서 읽기 작업은 다른 트랜잭션이 가지고 있는 잠금을 기다리지 않고, 일기 작업이 가능하다.
격리 수준이 SERIALIZABLE이 아닌 READ_UNCOMMITTED나 READ_COMMITTED, REPEATABLE_READ 수준인 경우 INSERT와 연결되지 않은 순수한 읽기 작업은 다른 트랜잭션의 변경 작업과 관계 없이 항상 잠금을 대기하지 않고 바로 실행된다.

특정 사용자가 레코드를 변경하고 아직 커밋을 수행하지 않았다 하더라고 이 변경 트랜잭션이 다른 사용자의 SELECT 작업을 방해하지 않는다.
이를 '잠금 없는 일관된 읽기'라고 표현하며, InnoDB에서는 변경되기 전의 데이터를 읽기 위해 언두 로그를 사용한다.

오랜 시간동안 활성 상태인 트랜잭션으로 인해 MySQL 서버가 느려지거나 문제가 발생할 때가 가끔 있는데, 바로 이러한 일관된 일기를 위해 언두 로그를 삭제하지 못하고 계속 유지해야하기 때문에 발생하는 문제다.
따라서 트랜잭션이 시작됐다면 가능한 빨리 롤백이나 커밋을 통해 트랜잭션을 완료하는 것이 좋다.

4.2.5 자동 데드락 감지
InnoDB 스토리지 엔진은 내부적으로 잠금이 교착 상태에 빠지지 않았는지 체크하기 위해 잠금 대기 목록을 그래프 형태로 관리한다.
InnoDB 스토리지 엔진은 데드락 감지 스레드를 가지고 있어서 데드락 감지 스레드가 주기적으로 잠금 대기 그래프를 검사해 교착 상태에 빠진 트랜잭션들을 찾아서 그중 하나를 강제 종료한다.
이때 어느 트랜잭션을 먼저 강제 종료할 것인지를 판단하는 기준은 트랜잭션의 언두 로그양미며, 언두 로그 레코드를 더 적게 가진 트랜잭션이 일반적으로 롤백의 대상이 된다.

InnoDB 스토리지 엔진은 상위 레이어인 MySQL 엔진에서 관리되는 테이블 잠금은 볼 수가 없어서 데드락 감지가 불홗실할 수도 있는데, innodb_table_locks 시스템 변수를 활성화하면 InnoDB 스토리지 엔진 내부의 레코드 잠금뿐만 아니라 테이블 레벨의 잠금까지 감지할 수 있게된다.
특별한 이유가 없다면 innodb_table_locks 시스템 변수를 활성화하자
일반적인 서비스에서는 데드락 감지 스레드가 트랜잭션의 잠금 목록을 검사해서 데드락을 찾아내는 작업은 크게 부담되지 않는다.
하지만 동시 처리 스레드가 매우 많아지거나 트랜잭션이 가진 잠금의 개수가 많아지면 데드락 감지 스레드가 느려진다.
데드락 감지 스레드가 느려지면 서비스 쿼리를 처리 중인 스레드는 더는 작업을 진행하지 못하고 대기하면서 서비스에 악영향을 미치게 된다. 이렇게 동시 처리 스레드가 매우 많은 경우 데드락 감지 스레드는 더 많은 CPU 작원을 소모할 수도 있다.

이런 문제검을 해결하기 위해 innodb_deadlock_detect 시스템 변수를 제공하며, off로 설정하면 데드락 감지 스레드는 더는 작동하지 않게 된다.
데드락 감지 스레드가 더이상 동작하지 않으면 InnoDB 스토리지 엔진 내부에서 2개 이상의 트랜잭션이 상대방이 가진 잠금을 요구하는 상황이 발생해도 누군가 중재를 하지 않기 때문에 무한정 대기하게 된다.

데드락 스레드가 부담이되어 innodb_deadlock_detect를 OFF로 설정해서 비활성화하는 경우라면 innodb_lock_wait_timeout을 기본값인 50초보다 훨씬 낮은 시간으로 변경해서 사용할 것을 권장한다.

4.2.6 자동화된 장애 복구
innodb에는 손실이나 장애로부터 데이터를 보호하기 위한 여러 가지 메커니즘이 탑재돼 있다.
innodb 스토리지 엔진은 매우 견고해서 데이터 파일이 손상되거나 MySQL 서버가 시작되지 못하는 경우 거의 발생하지 않는다. 하지만 MySQL 서버와 무관하게 디스크나 서버 하드웨어 이슈로 InnoDB 스토리지 엔진이 자동으로 복구를 못하는 경우도 발생할 수 있는데,
일단 한번 문제가 생기면 복구하기가 쉽지 않다.

innodb 데이터 파일은 기본적으로 MySQL 서버가 시작될때 항상 자동 복구를 수행한다. 이단계에서 자동으로 복구될 수 없는 손상이 있다면 자동 복구를 멈추고 MySQL 서버는 종료돼 버린다.

이때는 MySQL 서버의 설정 파일에 innodb_force_recovery 시스템 변수를 설정해서 MYSQL 서버를 시작해야한다.
이 설정 값은 MySQL 서버가 시작될 때 innoDB 스토리지 엔진이 데이터 파일이나 로그 파일의 손상 여부 검사 과정을 선별적으로 진행할 수 있게 한다.
- innodb의 로그 파일이 손상 됐다면 6으로 설정하고 MySQL 서버를 기동한다.
- innodb 테이블의 데이터 파일이 손상 됐다면 1로 설정하고 MySQL 서버를 기동한다.
- 어떤부분이 문제인지 알 수 없다면 innodb_force_recovery 설정값을 1부터 6까지 변경해서 MySQL을 재시작해본다.

그리고 일단 MySQL 서버가 기동되고 innodb 테이블이 인식된다면 mysqldump를 이용해 데이터를 가능한 만큼 백업하고 그 데이터로 MySQL 서버의 DB와 테이블을 다시 생성하는 것이 좋다.


innodb_force_recovery 설정값 정리

1(SRV_FORCE_IGNORE_CORRUPT) : innoDB의 테이블 스페이스의 데이터나 인덱스 페이지에서 손상된 부분이 발견돼도 무시하고 MySQL 서버를 시작한다.
에러 로그 파일에 'Database page corruption on disk or failed' 메시지가 출려될 때는 대부분 이 경우에 해당한다.
이때는 mysqldump 프로그램이나 SELECT INTO OUTFILE... 명령을 이용해 덤프해서 데이터베이스를 다시 구축하는 것이 좋다.

2(SRV_FORCE_NO_BACKGROUND):
innodb는 쿼리의 처리를 위해 여러 종류의 백그라운드 스레드를 동시에 사용한다.
이 복구 모드에서는 이러한 백그라운드 스레드 가운데 메인 스레드를 시작하지 않고 MySQL 서버를 시작한다.
innoDB는 트랜잭션의 롤백을 위해 언두 데이터를 관리하는데, 트랜잭션이 커밋되어 불필요한 언두 데이터는  innoDB의 메인 스레드에 의해 주기적으로 삭제된다.
innoDB의 메인 스레드가 언두 데이터를 삭제하는 과정에서 장애가 발생한다면 이 모드로 복구하면 된다.

3(SRV_FORCE_NO_TRX_UNDO):
innodb에서 트랜잭션이 실행되면 롤백에 대비해 변경 전의 데이터를 언두 영역에 기록한다. 일반적으로 MySQL 서버는 다시 시작하면서 언두 영역의 데이터를 먼저 데이터 파일에 적용하고 그다음 리두 로그의 내용을 다시 덮어써서 장애 시점의 데이터 상태를 만들어낸다.
그리고 정삭적인 MySQL 서버의 시작에서는 최종적으로 커밋되지 않은 트랜잭션은 롤백을 수행하지만 3으로 설정되면 커밋되지 않은 트랜잭션의 작업을 롤백하지 않고 그대로 놔둔다,
즉 커밋되지 않고 종료된 트랜잭션은 계속 그 상태로 남아 있게 MySQL 서버를 시작하는 모드다.

4(SRV_FORCE_NO_IBUF_MERGE):
인서트 버퍼에 기록된 내용은 언제 데이터 파일에 병합될지 알 수 없다. 만약 MySQL이 재시작되면서 인서트 버퍼의 손상을 감지하면 InnoDB는 에러를 발생시키고, MySQL 서버는 시작하지 못한다.
이때 4로 설정하면 인서트 버퍼의 내용을 무시하고 강제로 MySQL이 시작되게 한다. 인서트 버퍼는 실제 데이터와 관련된 부분이 아니라 인덱스에 관련되 부분이므로 테이블을 덤프한 후 다시 DB를 구축하면 데이터의 손실 없이 복구할 수 있다.

5(SRV_FORCE_NO_UNDO_LOG_SCAN):
MySQL 서버가 장애나 정상적으로 종료되는 시점에 진행 중인 트랜잭션이 있었다면 MySQL은 그냥 단순히 그 커넥션을 강제로 끊어 버리고 별도의 정리 작업 없이 종료한다.
MySQL 다시 시작하면 innoDB엔진은 언두 레코드를 이용해 데이터 페이지를 복구하고 리두 로그를 적용해 종료 시점이 나 장애 발생시점의 상태를 재현해 낸다.
그리고  마지막으로 커밋되지 않은 트랜잭션에서 변경한 작업은 모두 롤 백처리한다.
그런데 innoDB의 언두 로그를 사용할 수 없다면 innoDB엔진의 에러로 MySQL 서버를 시작할 수 없다.
이때 5로 설정하면 innoDB는 언두 로그를 무시하고 MySQL을 시작할 수 있다.
하지만 이모드로 복구되면 커밋되지 않았던 작업도 모두 커밋된 것처럼 처리되므로 실제로는 잘못된 데이터가 데이터 베이스에 남는 것이라고 볼 수 있다.

6(SRV_FORCE_NO_TRX_UNDO):
리두 로그가 손상될때 사용한다.
이 복구 모드로 시작하면 innodb 엔진은 리두 로그를 모두 무시한 채로 MySQL 서버가 시작된다. 또한 커밋됐다 하더라고 리두 로그에만 기록되고 데이터 파일에는 기록되지 않은 데이터는 모두 무시된다.
즉, 마지막 체크 포인트 시점의 데이터만 남게 된다.
이때는 기존 innoDB의 리두 로그는 모두 삭제하고 MySQL 서버를 시작하는 것이 좋다. MySQL 서버가 시작하면서 리두 로그가 없으면 새로 생성하므로 별도로 파일을 만들 필요는 없다.
이때도 mysqldump를 이용해 데이터를 모두 백업해서 MySQL 서버를 새로 구축하는 것이 좋다.

위와 같이 진행했음에도 MySQL 서버가 시작되지 않으면 백업을 이용해 다시 구축하는 방법밖에 없다.
백업이 있다면 마지막 백업으로 DB를 새로 구축하고 바이너리 로그를 사용해 최대한 장애 시점까지의 데이터를 복구를 진행하면 데이터 손실을 최소화할 수 있다.

4.2.7 InnoDB 버퍼 풀
디스크의 데이터 파일이나 인덱스 정보를 메모리에 캐시해 두는 공간이다. 쓰기 작업을 지연 시켜 일괄 작업으로 처리할 수 있게 해주는 버퍼 역할도 같이한다.
일반적인 애플리케이션에서는 INSERT, UPDATE, DELETE처럼 데이터를 변경하는 쿼리는 데이터 파일의 이곳저곳에 위치한 레코드를 변경하기 때문에 랜덤한 디스크 작업을 발생시킨다.
하지만 버퍼 풀이 이러한 변경된 데이터를 모아서 처리하면 랜덤한 디스크 작업의 횟수를 줄일 수 있다.

4.2.7.1 버퍼 풀의 크기 설정
innodb 버퍼 풀은 innodb_buffer_pool_size 시스템 변수로 크기를 설정할 수 있으며, 동적으로 버퍼 풀의 크기를 확장할 수 있다.
하지만 버퍼 풀의 크기 변경은 크리티컬한 변경이므로 가능하면 MySQL 서버가 한가한 시점을 골라서 진행하는 것이 좋다.
innoDB 버퍼 풀은 내부적으로  128MB 청크 단위로 쪼개어 관리되는데, 이는 버퍼 풀의 크기를 줄이거나 늘리기 위한 단위 크기로 사용된다. 그래서 버퍼 풀의 크기를 줄이거나 늘릴 때는 128MB 단위로 처리된다.

innodb 버퍼 풀은 전통적으로 버퍼 풀 전체를 관리하는 잠금으로 인해 내부 잠금 경합을 많이 유발해왔는데 이런 경합을 줄이기 위해 버퍼 풀을 쪼개어 관리할 수 있게 개선되었다.
innodb_buffer_pool_instances 시스템 변수를 이용해 버퍼 풀을 여러 개로 분리해서 관리할 수 있는데, 각 버퍼 풀을 버퍼 풀 인스턴스라고 표현한다.
전체 버퍼 풀을 위한 메모리 크기가 1GB미만이면 버퍼 풀 인스턴스는 1개만 생성된다. 메모리가 크다면 버퍼 풀 인스턴스당 5GB 정보가 된게 인스턴스 개수를 설정하는 것이 좋다.

4.2.7.2 버퍼 풀의 구조
InnoDB 스토리지 엔진은 버퍼 풀이라는 거대한 메모리 공간을 페이지 크기(innodb_page_size 시스템 변수에 설정된)의 조각으로 쪼개어 InnoDB 스토리지 엔진이 데이터를 필요로 할 때 해당 데이터 페이지를 읽어서 각 조각에 저장한다.
버퍼 풀의 페이지 크기 조각을 관리하기 위해 InnoDB 스토리지 엔진은 크게
LRU(Least Recently Used)리스트와
플러시(Flush) 리스트
프리(Free) 리스트라는 3개의 자료 구조를 관리한다.

프리 리스트는 InnoDB 버퍼 풀에서 실제 사용자 데이터로 채워지지 않은 비어 있는 페이지들의 목록이며, 사용자의 쿼리가 새롭게 디스크의 데이터 페이지를 읽어와야 하는 경우 사용된다.
LRU 리스트는 관리하는 목적은 디스크로부터 한 번 읽어온 페이지를 최대한 오랫동안 innoDB버퍼 풀의 메모리에 유지해서 디스크 읽기를 최소화하는 것이다. innoDB 스토리지 엔진에서 데이터를 찾는 관정은 대략 다음과 같다.
LRU 리스트는 엄밀하게 LRU와 MRU(Most Recently Used) 리스트가 결합된 형태다. Old 서브리스트 영역은 LRU에 해당하며, New서브리스트 영역은 MRU 정도로 이해하면 된다.

1.필요한 레코드가 저장된 데이터 페이지가 버퍼 풀에 있는지 검사
    A.innodb 어댑티브 해시 인덱스를 이용해 페이지를 검색
    B. 해당 테이블의 인덱스(B-Tree)를 이용해 버퍼 풀에서 페이지를 검색
    C. 버퍼 풀에 이미 데이터 페이지가 있었다면 해당 페이지의 포인터를 MRU 방향으로 승급

2. 디스크에서 필요한 데이터 페이지를 버퍼 풀에 적재하고, 적재된 페이지에 대한 포인터를 LRU 헤더 부분에 추가
3. 버퍼 풀의 LRU 헤더 부분에 적재된 데이터 페이지가 실제로 읽히면 MRU 헤더 부분으로 이동(Read Ahead와 같이 대량 읽기의 경우 디스크의 데이터 페이지가 버퍼 풀로 적재는 되지만 실제 쿼리에서 사용되지는 않을 수도 있으며, 이런 경우에는 MRU로 이동하지 않음)
4. 버퍼 풀에 상주하는 데이터 페이지는 사용자 쿼리가 얼마나 최든에 접근했었는지에 따라 나이가 부여되며, 버퍼 풀에 상주하는 동안 쿼리에서 오랫동안 사용되지 않으면 데이터 페이지에 부여된 나이가 오래되고 결국 해당 페이지는 버퍼 풀에서 제거된다. 버퍼 풀의 데이터 페이지가 쿼리에 의해 사용되면 나이가 초기화되어 다시 젊어지고
 MRU의 헤더 부분으로 옮겨진다.
5. 필요한 데이터가 자주 접근됐다면 해당 페이지의 인덱스 키를 어댑티브 해시 인덱스에 추가

그래서 처음 한 번 읽힌 데이터 페이지가 이후 자주 사용되다면 그 데이터 페이지는 InnoDB 버퍼 풀의 MRU 영역에서 계속 살아남게 되고, 반대로 거의 사용되지 않는다면 새롭게 디스크에서 읽히는 데이터 페이지들에 밀려서 LRU의 끝으로 밀려나 결국은 InnoDB 버퍼 풀에서 제거될 것이다.

플러시 리스트는 디스크로 동기화되지 않은 데이터를 가진 데이터 페이지의 변경 시점 기준의 페이지 목록을 관리한다.
디스크에서 읽은 상태 그래도 전혀 변경이 없다면 플러시 리스트에 관리되지 않지만, 일단 한 번 데이터 변경이 가해진 데이터 페이지는 플러시 리스트에 관리되고, 특정 시점이 되면 디스크로 기록돼야 한다.
데이터가 변경되면 innodb는 변경 내용을 리두 로그에 기록하고 버퍼 풀의 데이터 페이지에도 변경 내용을 반영한다. 그래서 리두 로그의 각 엔트리는 특정 데이터 페이지와 연결된다.

하지만 리두 로그가 디스크로 기록됐다고 해서 데이터 페이지가 디스크로 기록됐다는 것을 항상 보장하지 않는다. 때로는 그 반대의 경우도 발생할 수 있다.
innoDB 스토리지 엔진은 체크포인트를 발생시켜 디스크의 리두 로그와 데이터 페이지의 상태를 "동기화"하게 된다.
"체크포인트"는 MySQL 서버가 시작될때 InnoDB 스토리지 엔진이 리두 로그의 어느 부분부터 복구를 실행해야 할지 판단하는 기준점을 만드는 역할을 한다.


4.2.7.3 버퍼 풀과 리두 로그
InnoDB의 버퍼 풀과 리두 로그는 매우 밀접한 관계를 맺고 있다. InnoDB의 버퍼 풀은 서버의 메모리가 허용하는 만큼 크게 설정하면 할수록 쿼리의 성능이 빨라진다. 물론 이미 디스크의 모든 데이터 파일이 버퍼 풀에 적재될 정도의 버퍼 풀 공간이라면 더는 버퍼 풀 크기를 늘려도 성능에 도움이 되지 않겠지만
그렇지 않다면 디스크의 데이터가 버퍼 풀 메로리로 적재되면 성능이 좋아질 것이다.

InnoDB 버퍼 풀은 데이터베이스 서버의 성능 향상을 위해 데이터 캐시와 쓰기 버퍼링이라는 두 가지 용도가 있는데,
버퍼 풀의 메모리 공간만 단순히 늘리는 것은 데이터 캐시 기능만 향상시키는 것이다.

InnoDB 버퍼 풀의 쓰기 버퍼링 기능까지 향상 시키려면 InnoDB 버퍼 풀과 리두로그와의 관계를 먼저 이해해야 한다.
InnoDB의 버퍼 풀은 디스크에서 읽은 상태로 전혀 변경되지 않은 클린페이지와 함께 INSERT, UPDATE, DELETE 명령으로 변경된 데이터를 가진 더티 페이지도 가지고 있다.

더티페이지는 디스크와 메모리(버퍼 풀)의 데이터 상태가 다르기 때문에 언제가는 디스크로 기록돼야 한다.
하지만 더티 페이지는 버퍼 풀에 무한정 머무를 수 있는 것이 아니다. innoDB 스토리지 엔진에서 리두 로그는 1개 이상의 고정 크기 파일을 연결해서 순환 고리처럼 사용한다.
즉, 데이터 변경이 계속발생하면 리두 로그 파일에 기록됐던 로그 엔트리는 어느 순간 다시 새로운 로그 엔트리로 덮어 쓰인다. 그래서 innoDB 스토리지 엔진은 전체 리두 로그 파일에서 재사용 가능한 공간과 당장 재사용 불가능한 공간을 구분해서 관리해야 하는데
재사용 불가능한 공간을 활성 리두 로그(Active Redo Log)라고한다.

리두 로그 파일의 공간은 계속 순환되어 재사용되지만 매번 기록될 때마다 로그 포지션은 계속 증가된 값을 갖게 되는데, 이를 LSN(Log Sequence Number)이라고 한다.
InnoDB 스토리지 엔진은 주기적으로 체크포인트 이벤트를 발생시켜 리두 로그와 버퍼 풀의 더티 페이지를 디스크로 동기화하는데, 이렇게 발생한 체크포인트 중 가장 최근 체크포인트 지점의 LSN 활성 리두 로그 공간의 시작점이 된다. 하지만 활성 리두 로그 공간의 마지막은 계속해서 증가하기 때문에 체크포인트와 무관하다.
그리고 가장 최근 체크포인트의 LSN과 마지막 리두 로그 엔트리의 LSN의 차이를 체크포인트 에이지(CheckPoint Age)라고 한다. 즉 체크포인트 에이지는 활성 리두 로그 공간의 크기를 일컫는다.

innoDB버퍼 풀의 더티 페이지는 특정 리두 로그 엔트리와 관계를 가지고, 체크포인트가 발생하면 체크포인트 LSN보다 작은 리두 로그 엔트리와 관련된 더티 페이지는 모두 디스크로 동기화돼야 한다.
물론 당연히 체크포인트 LSN보다 작은 LSN 값을 가진 리두 로그 엔트리도 데스크로 동기화돼야 한다.

처음부터 리두 로그 파일의 크기를 적절히 선택학시 어렵다면 버퍼 풀의 크기가 100GB이하의 MySQL 서버에서는 리두 로그 파일의 전체 크기를 대략 5~10GB 수준으로 선택하고 필요할 때마다 조금씩 늘려가면서 최적값을 선택하는 것이 좋다.


4.2.7.4 버퍼 풀 플러시(Buffer Pool Flush)
InnoDB 스토리지 엔진은 버퍼 풀에서 아직 디스크로 기록되지 않은 더티 페이지들을 성능상의 악영향이 없이 디스크에 동기화하기 위해 다음과 같이 2개의 플러시 기능을 백그라운드로 실행한다.

-플러시 리스트 플러시
-LRU 리스트 플러시

4.2.7.4.1 플러시 리스트 플러시
InnoDB 스토리지 엔진은 리두 로그 공간의 재활요을 위해 주기적으로 오래된 리두 로그 엔트리가 사용하는 공간을 비워야 한다. 그런데 이떄 오래된 리두 로그 공간이 지워지려면 반드시 InnoDB 버퍼 풀의 더티 페이지가 먼저 디스크로 동기화돼야한다.
이를 위해 InnoDB 스토리지엔진은 주기적으로 플러시 리스트 플러시 함수를 호출해서 플러시 리스트에서 오래전에 변경된 데이터 페이지순서대로 디스크에 동기화하는 작업을 수행한다.

이때 얼마나 많은 더티 페이지를 한번에 디스크로 기록하느냐에 따라 사용자의 쿼리 처리가 악영향을 받지 않으면서 부드럽게 처리된다.

이를 위해 InnoDB 스토리지 엔진은 다음과 같은 시스템 변수들을 제공한다.

-innodb_page_cleaners
-innodb_max_dirty_pages_pct_iwm
-innodb_max_dirty_pages_pct
-innodb_io_capacity
-innodb_io_capacity_max
-innodb_flush_neighbors
-innodb_adaptive_flushing
-innodb_adaptive_flushing_lwm

InnoDB 스토리지 엔진에서 더티 페이지를 디스크로 동기화하는 스레드를 클리너 스레드라고 하는데, innodb_page_cleaners 시스템 변수는 클리너 스레드의 개수를 조정할 수 있게 해준다.
InnoDB 스토리지 엔진은 여러 개의 InnoDB 버퍼 풀 인스턴스를 동시에 사용할 수 있는데 innodb_page_cleaners 설정값이 버퍼 풀 인스턴스 개수보다 많은 경우에는 innodb_buffer_pool_instances 설정값으로 자동으로 변경한다.
따라서 가능하면 innodb_page_cleaners 설정값은 innodb_buffer_pool_instances 설정값과 동일한 값으로 설정하자.

InnoDB 버퍼 풀은 클린 페이지뿐만 아니라 사용자의 DML(INSERT, UPDATE, DELETE)에 의해 변경된 더티 페이지도 함께 가지고 있다.
여기서 InnoDB 버퍼 풀은 한계가 있기 때문에 무한정 더티 페이지를 그대로 유지할 수 없다. 기본적으로  InnoDB 스토리지 엔진은 전체 버퍼 풀이 가진 페이지의 90%까지 더티 페이지를 가질 수 있는데, 때로는 이값이 너무 높을 수도 있다.
이런 경우에는 innodb_max_dirty_pages_pct라는 시스템 설정 변수를 이용해 더티 페이지의 비율을 조정할 수 있다.
일반적으로 InnoDB 버퍼 풀은 더티 페이지를 많이 가지고 있을수록 디스크 쓰기 작업을 버퍼링함으로써 여러 번의 디스크 쓰기를 한 번으로 줄이는 효과를 극대화할 수 있다. 그래서 innodb_max_dirty_pages_pct 시스템 설절은 가능하면 기본값을 유지하는 것이 좋다.

여기서 한 가지 더 문제점이 발생하는데, InnoDB 버퍼 풀에 데이터 페이지가 많으면 많을수록 디스크 쓰기 폭발(Disk IO Burst) 현상이 발생할 가능성이 높아진다. InnoDB 스토리지 엔진은 innodb_io_capacity 시스템 변수에 설정된 값을 기준으로 더티 페이지 쓰기를 실행한다.
이런 문제를 완화하기 위해 innodb_max_dirty_pages_pct_iwm이라는 시스템 설정 변수를 이용해 일정 수준 이상의 더티 페이지가 발생하면 조금씩 더티 페이지를 디스크로 기록하게 하고 있다.

innodb_io_capacity와 innodb_io_capacity_max 시스템 변수는 각 DB 서버에서 어느 정도의 디스크 읽고 쓰기가 가능한지를 설정하는 값이다.
innodb_io_capacity는 일반적인 상황에서 디스크가 적절히 처리할 수 있는 수준의 값을 설정하며,
innodb_io_capacity_max는 디스크가 최대의 성능을 발휘할 때 어느 정도의 디스크 읽고 쓰기가 가능한지를 설정한다.

관리해야할 MySQL 서버가 많다면 일일히 서버의 트래픽을 봐 가면서 innodb_io_capacity와 innodb_io_capacity_max를 설정하는 것은 상당히 번거로운 일이 될 거다.
그래서 InnoDB 스토리지 엔진은 어댑티브 플러시라는 기능을 제공한다.
어댑티브 플러시 기능이 활성화되면 InnoDB 스토리지 엔진은 단순히 버퍼 풀의 더티 페이지 비율이나  innodb_io_capacity와 innodb_io_capacity_max설정값에 의존하지 않고 새로운 알고리즘을 사용한다.

어댑티브 플러시 알고리즘은 리두 로그의 증가 속도를 분석해서 적절한 수준의 더티 페이지가 버퍼 풀에 유지될 수 있도록 디스크 쓰기를 실행한다.
innodb_adaptive_flushing_lwm 시스템 변수의 기본값은 10%인데, 이는 전체 리두 로그 공간에서 활성 리두 로그의 공간이 10%미만이면 어댑티브 플러시가 자동하지 않다가 10%가 넘어서면 그떄부터 어댑티브 플러시 알고리즘이 작동하게된다.

innodb_flush_neighbors 시스템 변수는 더티 페이지를 디스크에 기록할 때 디스크엣서 근접한 페이지 중에서 더티 페이지가 있다면 InnoDB 스토리지 엔진이 함께 묶어서 디스크로 기록하게 해주는 기능을 활성화할지 결정한다.
하지만 요즘은 대부분 솔리드 스테이트 드라이브를 사용하기 때문에 기본값인 비활성 모드로 유지하는 것이 좋다.


4.2.7.4.2 LRU 리스트 플러시
innodb 스토리지엔진은 LRU 리스트에서 사용 빈도가 낮은 데이터 페이지들을 제거하고 새로운 페이지들을 읽어올 공간을 만들어야 하는데, 이를 위해 LRU 리스트 플러시 함수가 사용된다.
InnoDB 스토리지 엔진은 LRU 리스트의 끝부분부터 시작해서 최대 innodb_lru_scan_depth 시스템 변수에 설정된 개수 만큼의 페이지들을 스캔한다.
innoDB 스토리지 엔진은 이때 스캔하면서 더티 페이지는 디스크에 동기화하게 하며, 클린페이지는 즉시 프리(Free) 리스트로 페이지를 옮긴다.
innodb 스토리지 엔진은 InnoDB 버퍼 풀 인스턴스별로 최대 innodb_lru_scan_depth 개수만큼 스캔하기 떄문에 실질적으로 LRU 리스트의 스캔은 (innodb_buffer_pool_instances * innodb_lru_sacn_depth) 수만큼 수행한다.

4.2.7.5 버퍼 풀 상태 백업 및 복구
디스크의 데이터가 버퍼 풀에 적재돼 있는 상태를 워밍업이라고 표현하는데, 버퍼 풀이 잘 워밍업된 상태에서는 그렇지 않은 경우보다 몇십 배의 쿼리 처리 속도를 보이는 것이 일반적이다.

그래서 5.5버전에서는 mysql 서버 점검을 위해 셧다운했다가 다시 시작하는 경우 서비스를 오픈하기 전에 강제 워밍업을 위해 주요 테이블을 풀 스캔을 하곤했다.
하지만 5.6버전부터는 버퍼 풀 덤프 및 적재 기능이 도입됐다. 서버 점검이나 기타 작업을 위해 MySQL를 재시작해야 하는 경우 innodb_buffer_pool_dump_now 시스템 변수를 이용해 현재 innodb 버퍼 풀 상태를 백업할 수 있다.
innodb_buffer_pool_load_now 변수를 이용해 백업된 버퍼 풀의 상태를 복구도 가능하다.

===
-- // MySQL 서버 셧다운 전에 버퍼 풀의 상태 백업
> SET GLOBAL innodb_buffer_pool_dump_now=ON;

-- // MySQL 서버 재시작 후에 버퍼 풀의 상태 복구
> SET GLOBAL innodb_buffer_pool_load_now=ON;

-- // 버퍼풀 복구 작업 취소
> SET GLOBAL innodb_buffer_pool_load_abort=ON;

-- // innodb스토리지엔진 버퍼풀 복구 과정 진행도
> SHOW status LIKE 'Innodb_buffer_pool_dump_status'\G
===

백업작업은 버퍼풀 LRU 리스트에 적재된 데이터 페이지의 메타 정보만 가져와 저장하기 때문에 빠르다.
하지만 복구 과정은 innoDB 버퍼 풀의 크기에 따라 상당히 시간이 걸릴수도 있다.

4.2.7.6 버퍼 풀 적재 내용 확인
MySQL 서버의 information_schema 데이터베이스의  innodb_buffer_page 테이블을 이용해 innodb 버퍼 풀의 메모리에 어떤 테이블의 페이지들이 적재돼 있는지 확인할 수 있었다.
하지만 InnoDB 버퍼 풀의 큰 경우에는 이테이블 조회가 상당히 큰 부하를 일으키면서 서비스 쿼리가 많이 느려지는 문제가 있었다. 그래서 실제 서비스용으로 사용되는 MySQL 서버에서는 버퍼 풀의 상태를 확인하는 것이 거의 불가능했다.

MySQL 8.0 버전에서는 이런한 문제점을 해결하기 위해 information_schema 데이터베이스에 innodb_cached_indexes 테이블이 새로 추가됐다. 이 테이블을 이용하면 테이블의 인덱스 별로 데이터 페이지가 얼마나 innodb 버퍼 풀에 적재되 있는지 확인할 수 있다.

4.2.8 Double Write Buffer
InnoDB 스토리지 엔진의 리두 로그는 리두 로그 공간의 낭비를 막기 위해 페이지의 변경된 내용만 기록한다.
이로 인해 InnoDB의 스토리지 엔진에서 더티 페이지를 디스크 파일로 플러시할 때 일부만 기록되는 문제가 발생하면 그 페이지의 내용은 복구할 수 없을 수도 있다.
이렇게 페이지가 일부만 기록되는 현상을 파셜 페이지 또는 톤 페이지라고 하는데, 이런 현상은 하드웨어의 오작동이나 시스템의 비정상 종료 등으로 발생할 수 있다.

이와 같은 문제를 막기 위해 Double-Write 기법을 이용한다. 이때 innodb 스토리지 엔진은 실제 데이터 파일에 변경 내용을 기록하기 전에 'A'~'E'까지의 더티 페이지를 우선 묶어서 한번의 디스크 쓰기로 시스템 테이블 스페이스의 DoubleWrite 버퍼에 기록한다.
그리고 InnoDB 스토리지 엔진은 각 더티 페이지를 파일의 적당한 위치에 하나씩 랜덤으로 쓰기를 실행한다.

DoubleWrite 버퍼의 내용은 실제 데이터 파일의 쓰기가 중간에 실패할 때만 원래의 목적으로 사용된다. 'A'~'E' 쓰기 실행중에 'C'페이지 기록도중에 운영체제가 비정상적으로 종료됐다고 가정했을때
그러면 InnoDB 스토리지 엔진은 재시작될 때 항상 DoubleWrite버퍼의 내용과 데이터 파일의 페이지들을 모두 비교해서 다른 내용을 담고 있는 페이지가 있으면 DoubleWrite 버퍼 내용을 데이터 파일의 페이지로 복사한다.

DoubleWrite기능을 사용할지 여부는 innodb_doublewrite 시스템 변수로 제어할 수 있다.
DoubleWrite버퍼는 데이터의 안정성을 위해 자주 사용된다.
HDD처럼 자기원판이 회전하는 저장 시스템에서는 어차피 한번의 순차 디스크 쓰기를 하기 때문에 별로 부담이 없다. 하지만 SSD 처럼 랜점 IO나 순차 IO의 비용이 비슷한 저장 시스템에서는 상당히 부담스러울 수 있다.
하지만 데이터의 무결성이 중요한 서비스에서는 DoubleWrite의 활성화를 고려하는 것이 좋다.

4.2.9 언두 로그
InnoDB 스토리지 엔진은 트랜잭션과 격리 수준을 보장하기 위해 DML(INSERT, UPDATE, DELETE)로 변경되기 이전 버전의 데이터를 별도로 백업한다. 이렇게 백업된 데이터를 언두로그라고 한다.

언두 로그는 어떻게 사용되는지 간단히 살펴보자
- 트랜잭션 보장 : 트랜잭션이 롤백되면 트랜잭션 도중 변경된 데이터를 변경 전 데이터로 복구해야하는데 이때 언두 로그에 백업해둔 이전 버전의 데이터를 이용해 복구한다.
- 격리 수준 보장 : 특정 커넥션에서 데이터를 변경하는 도중에 다른 커넥션에서 데이터를 조회하면 트랜잭션 격리 수준에 맞게 변경중인 레코드를 읽지 않고 언두 로그에 백업해둔 데이터를 읽어서 반환하기도 한다.

언두 로그는 InnoDB 스토리지 엔진에서 매우 중요한 역할을 담당하지만 관리 비용도 많이 필요하다.

4.2.9.1 언두 로그 모니터링
언두 로그의 데이터는 크게 두가지 용도로 사용되는데, 첫 번째 용도가 바로 위에서 언급한 트랜잭션의 롤백 대비용이다. 두번째 용도는 트랜잭션의 격리 수준을 유지하면서 높은 동시성을 제공하는 데 있다.
트랜잭션의 격리 수준이라는 개념이 있는데 이는 동시에 여러 트랜잭션이 데이터를 변경하거나 조회할 때 한 트랜잭션의 작업 내용이 다른 트랜잭션에 어떻게 보일지를 결정하는 기준이다.

MySQL 5.5버전까지는 이렇게 언두 로그의 사용 공간이 한 번 늘어나면 MySQL 서버를 새로 구축하지 않는 한 줄일 수가 없었다.
언두 로그가 늘어나면 디스크 사용량 뿐만아니라 매번 백업할 때도 그만큼 더 복사를 해야 하는 문제점이 발생한다.

5.7과 8.0버전으로 업그레이드 되면서 언두 로그 공간의 문제점은 완전히 해결됐다. 언두 로그를 돌아가면서 순차적으로 사용해 디스크 공간을 줄이는 것도 가능하며, 때로는 MySQL 서버가 필요한 시점에 사용 공간을 자동으로 줄여 주기도 한다.
그래서 MySQL 서버의 언두 로그가 얼마나 증가했는지는 항상 모니터링하는 것이 좋은데
다음과 같이 MySQL 서버의 언두 로그 건수를 확인할 수 있다.

>SHOW ENGINE INNODB STATUS

MySQL 서버에서 실행되는 INSERT, UPDATE, DELETE 문장이 얼마나 많은 데이터를 변경하느냐에 따라 평상시 언두 로그 건수는 상이할 수 있다.
서버별로 안정적인 시점의 언두 로그 건수를 확인해 이를 기준으로 언두 로그의 급증 여부를 모니터링하는 것이 좋다.

주의%
MySQL 서버에서 INSERT 문장으로 인한 언두 로그와 UPDATE(DELETE 포함)문장으로 인한 언두 로그는 별도로 관리된다.
UPDATE와 DELETTE 문장으로 인한 언두 로그는 MVCC와 데이터 복구에 모두 사용된다.
하지만 INSERT문장으로 인한 언두 로그는 MVCC를 위해서는 사용되지 않고 롤백이나 데이터 복구만을 위해 사용되기때문에 별도로 관리된다.

위 커맨드로 조회된 언두로그 개수는 UPDATE, DELETE문장으로 인한 언두로그개수만 표시된다.

4.2.9.2 언두 테이블스페이스 관리
언두 로그가 저장되는 공간을 언두 테이블스페이스라고 한다.
5.6이전 버전에서는 언두로그가 모두 시스템 테이블스페이스에 저장됐다. 5.6이후 버전에서는 innodb_undo_tablespaces시스템 변수가 도입됐고 2보다 큰값을 설정하면 별도의 언두 로그 파일을 사용한다.

8.0으로 업그레이드되면서 항상 외부의 별도 로그 파일에 기록되도록 개선됐다.

하나의 언두 테이블스페이스는 1개 이상의 128개 이하의 롤백 세그먼트를 가지며, 롤백 세그먼트는 1개 이상의 언두 슬롯을 가진다.
하나의 롤백 세그먼트는 InnoDB의 페이지 크기를 16바이트로 나눈 값의 개수만큼의 언두 슬롯을 가진다.
하나의 트랜잭션이 필요로 하는 언두 슬롯의 개수는 트랜잭션이 실행하는 INSERT, UPDATE, DELETE문장의 특성에 따라 최대 4개까지 언두 슬롯을 사용하게 된다.
일반적인 트랜잭션이 임시 테이블을 사용하지 않으므로 하나의 트랜잭션은 대략 2개 정도의 언두 슬롯을 필요로 하다고 가정하면된다.

최대 동시 트랜잭션 수 = Innodb 페이지크기 / 16 * 롤백 세그먼트 개수 * 언두 테이블스페이스 개수

언두로그 공간이 남는 것은 크게 문제되지 않지만 언두 로그 슬롯이 부족한 경우에는 트랜잭션을 시작할 수 없는 심각한 문제가 발생한다. 이떄 적절히 언두 로그 관련 시스템 변수를 변경해야 한다.
언두 테이블스페이스 공간을 필요한 만큼만 남기고 불필요하거나 과도하게 할당된 공간을 운영체제로 반납하는 것을 "Undo tablespace truncate"라고 한다.
언두 테이블스페이스의 불필요한 공간을 잘라내는 방법은 자동과 수동으로 두 가지 방법이 있다.

-자동 모드 :트랜잭션이 데이터를 변경하면 이전 버전의 데이터를 언두 로그로 기록하는데, 트랜잭션이 커밋되면 더이상 언두 로그에 복사된 이전 값은 불필요해진다.
InnoDB 스토리지 엔진의 퍼지스레드(Undo Thread)는 주기적으로 깨어나서 언두 로그 공간에서 불필요해진 언두로그를 삭제하는 작업을 실행하는데, 이 작업을 언두 퍼지(Undo Purge)라고 한다.

-수동 모드 :언두 테이블스페이스를 비활성화해서 언두 테이블스페이스가 더이상 사용되지 않도록 설정하면 퍼지 스레드는 비활성 상태의 언두 테이블스페이스를 찾아서 불필요한 공간을 잘라내고
운영체제로 해당 공간을 반납하게 된다. 그리고 반납이 완료되면 언두 테이블스페이스를 다시 활성화한다. 수동 모드는 언두 테이블스페이스가 최소 3개 이상은 돼야 작동한다는 것을 기억하자

#언두 테이블스페이스 비활성화
> ALTER UNDO TABLESPACE tablespace_name SET INACTIVE;
# 활성화
> ALTER UNDO TABLESPACE tablespace_name SET ACTIVE;


4.2.10 체인지 버퍼
RDBMS에서 레코드가  INSERT되거나 UPDATE 될 때는 데이터 파일을 변경하는 작업뿐 아니라 해당 테이블에 포함된 인덱스를 업데이트하는 작업도 필요하다. 그런데 인덱스를 업데이트하는 작업은 랜덤하게 디스크를 읽는 작업이 필요하므로
테이블에 인덱스가 많다면 이작업은 상당히 많은 자원을 소모하된다.
그래서 InnoDB는 변경해야할 인덱스 페이지가 버퍼 풀에 있으면 바로 업데이트를 수행하지만 그렇지 않고 디스크로부터 읽어와서 업데이트해야 한다면 이를 즉시 실행하지 않고 임시 공간에 저장해 두고 바로 사용자에게 결과를 반환하는 형태로 성능을 향상 시키게 되는데,
이때 사용하는 임시 메모리 공간을 체인지 버퍼(Change Buffer) 라고 한다.

사용자에게 결과를 전달하기 전에 반드시 중복 여부를 체크해야 하는 유니크 인덱스는 체인지 버퍼를 사용할 수 없다.
체인지 버퍼에 임시로 저장된 인덱스 레코드 조각은 이후 백그라운드 스레드에 의해 병합되는데, 이 스레드를 "체인지 버퍼 머지 스레드"라고 한다.

innodb_change_buffering 시스템 변수에 설정할 수 있는 값은 다음과 같다.
-all : 모든 인덱스 관련 작업을 버퍼링
-none : 버퍼링 안함
-inserts : 인덱스에 추가하는 작업만 버퍼링
-deletes : 인덱스에 삭제 작업만 버퍼링
-changes : 인덱스에 추가하고 삭제하는 작업만 버퍼링
-purges: 인덱스 아이템을 영구적으로 삭제하는 작업만 버퍼링(백그라운드 작업)

체인지 버퍼는 기본적으로 InnoDB 버퍼 풀로 설정된 메모리 공간의 25%까지 사용할 수 있게 설정돼있으며, 필요하다면 50%까지 사용하게 설정할 수 있다.
innodb_change_buffer_max_size 시스템 변수에 비율을 설정하면 된다.

다음 커맨드로 체인지 버퍼가 얼마나 사용중인지 얼마나 많은  변경 사항을 버퍼링하고 있는지 알 수 있다.

#사용중인 메모리 공간 크기
> SELECT EVENT_NAME, CURRENT_NUMBER_OF_BYTES_USED
FROM performance_schema.memory_summary_global_by_event_name
WHERE EVENT_NAME ='momory/innodb/ibuf0ibuf';

#체인지 버퍼 관련 오퍼레이션 처리 횟수
>SHOW ENGINE INNODB STATUS

4.2.11 리두 로그 및 로그 버퍼
리두 로그는 트랜잭션의 4가지 요소인 ACID 중에서 D(Durable)에 해당하는 영속성과 가장 밀접하게 연관돼 있다. 리두로그는 하드웨어나 소프트웨어 등 여러가지 문제점으로 인해 MySQL 서버가 비정상적으로 종료됐을 때 데이터 파일에 기록되지 못한
데이터를 잃지 않게 해주는 안전장치다.

MySQL 서버를 포함한 대부분 데이터베이스 서버는 데이터 변경 내용을 로그로 먼저 기록한다. 거의 모든 DBMS에서 데이터 파일은 쓰기보다 읽기 성능을 고려한 자료 구조를 가지고 있기 때문에 데이터 파일 쓰기는 디스크의 랜덤 액세스가 필요하다.
그래서 변경된 데이터를 데이터 파일에 기록하려면 상대적으로 큰 비용이 필요하다.
이로 인한 성능 저하를 막기 위해 데이터베이스 서버는 쓰기 비용이 낮은 자료 구조를 가진 리두 로그를 가지고 있으며, 비정상 종료가 발생하면 리두 로그의 내용을 이용해 데이터 파일을 다시 서버가 종료되기 직전의 상태로 복구한다.

데이터베이스 서버는 ACID도 중요하지만 성능도 중요하기 때문에 데이터 파이뿐만 아니라 리두 로그를 버퍼링할 수 있는 InnoDB 버퍼 풀이나 리두 로그를 버퍼링할 수 있는 로그 버퍼와 같은 자료구조도 가지고 있다.
데이터베이스 서버에서 리두 로그는 트랜잭션이 커밋되면 즉시 디스크로 기록되도록 시스템 변수를 설정하는 것을 권장한다. 그리고 당연히 그렇게 돼야만 서버가 비정상적으로 종료됐을 때 직전까지의 트랜잭션 커밋 내용이
리두 로그에 기록될 수 있고, 그 리두 로그를 이용해 장애 시점까지의 복구가 가능해진다.

InnoDB 스토리지 엔진의 리두 로그 파일들의 전체 크기는 InnoDB 스토리지 엔진이 가지고 있는 버퍼 풀의 효율성을 결정하기 때문에 신중히 결정해야 한다.
리두 로그 파일의 전체 크기가 InnoDB 버퍼 풀의 크기에 맞게 적절히 선택돼야 InnoDB 스토리지 엔진이 적절히 변경된 내용을 버퍼 풀에 모았다가 한 번에 모아서 디스크에 기록할 수 있다.
하지만 사용량(특히 변경 작업)이 많은 DBMS 서버의 경우에는 이 리두 로그 기록작업이 큰 문제가 되는데, 이러한 부분을 보완하기 위해 최대한 ACID 속성을 보장하는 수준에서 버퍼링한다.
이러한 리두 로그 버퍼링에 사용되는 공간이 로그 버퍼다.

ACID는 데이터베이스에서 트랜잭션의 무결성을 보장하기 위해 꼭 필요한 4가지 요소를 의미한다.
-A: Atomic 첫 글자로 트랜잭션은 원자성 작업이어야 함을 의미한다.
-C: Consistent 첫 글자로 일관성을 의미한다.
-I: Isolated 첫 글자로 격리성을 의미한다.
-D: Durable 첫 글자로 영속성을 의미한다. 한번 저장된 데이터는 지속적으로 유지돼야 함을 의미한다.

일관성과 격리성 이 두가지 속성은 서로 다른 두 개의 트랜잭션에서 동일 데이터를 조회하고 변경하는 경우에도 상호 간섭이 없어야 한다는 것을 의미한다.
