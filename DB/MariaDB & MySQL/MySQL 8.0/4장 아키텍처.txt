
4장 MySQL 아키텍처=================================================
MySQL 서버는 사람의 머리 역할을 담당하는 MySQL 엔진과 손발 역할을 담당하는 스토리지 엔진으로 구분할 수 있다.

4.1 MySQL 엔진 아키텍처
MySQL은 일반 사용 RDBMS와 같이 대부분의 프로그래밍 언어로부터 접근 방법을 모두 지원한다.
C API 부터 JDBC, ODBC, .NET의 표준 드라이버를 제공하며, 이러한 드라이버를 이용해 C/C++, PHP, JAVA, Python, Ruby 까지 모든 언어로 MySQL 서버에서 쿼리를 사용할 수 있게 지원한다.


MySQL 서버는 크게 MySQL 엔진과 스토리지 엔진으로 구분할 수 있다.

MySQL의 쿼리 파서나 옵티마이저 등과 같은 기능을 스토리지 엔진과 구분하고자, MySQL 엔진과 스토리지 엔진으로 구분했다. 그리고 이둘은 모두 합쳐서 그냥 MySQL 또는 MySQL 서버라고 표하겠다.

4.1.1 MySQL 엔진
MySQL엔진은 클라이언트로부터의 접속 및 쿼리 요청을 처리하는 커넥션 핸들러와 SQL 파서 및 전처리기, 쿼리의 최적화된 실행을 위한 옵티마이저가 중심을 이룬다.
또한 MySQL은 표준 SQL(ANSI SQL)문법을 지원하기 때문에 표준 문법에 따라 작성된 쿼리는 타 DBMS와 호환되어 실행될 수 있다.

4.1.1.2 스토리지 엔진
MySQL 엔진은 요청된 SQL 문장을 분석하거나 최적화하는 등 DBMS의 두뇌에 해당하는 처리를 수행하고, 실제 데이터를 디스크 스토리지에 저장하거나 디스크 스토리지로부터 데이터를 읽어오는 부분은 스토리지 엔진이 전담한다.
MySQL 서버에서 MySQL 엔진은 하나지만 스토리지 엔진은 여러 개를 동시에 사용할 수 있다.
테이블이 사용할 스토리지 엔진을 지정하면 이후 해당 테이블의 모든 읽기 작업이나 변경 작업은 젖의된 스토리지 엔진이 처리한다.

INSERT, DELETE, SELECT, UPDATE 등의 작업이 발생하면 InnoDB 스토리지 엔진이 그러한 처리를 담당한다. 그리고 각 스토리지 엔진은 성능 향상을 위해 키 캐시나 InnoDB 버퍼풀 과 같은 기능을 내장하고 있다.

4.1.1.3 핸들러 API
MySQL엔진의 쿼리 실행기에서 데이터를 쓰거나 읽어야 할 때는 각 스토리지 엔진에 쓰기 또는 읽기를 요청하는데, 이러한 요청을 핸들러 요청이라하고, 여기서 사용되는 API를 핸들러API라고 한다.
InnoDB 스토리지 엔진또한 이 핸들러 API를 이용해 MySQL 엔진과 데이터를 주고받는다.
이 핸들러 API를 통해 얼마나 많은 데이터(레코드) 작업이 있었는지
SHOW GLOBAL STATUS LIKE 'Handler%'; 명령으로 확인할 수 있다.
